---
import { Icon } from "astro-icon/components";
import LogoTypo from "./LogoTypo.astro";
import type { SbBlokData } from "@storyblok/astro";
import Link from "./Link.astro";

import { splitRoll } from "../../utils/splitString";
import LangSwitcher from "./LangSwitcher.astro";

const { logoless, blok, alternates, white } = Astro.props;
---

<header
    class="pointer-events-none fixed top-0 right-0 left-0 z-[100] translate-y-[-50] pt-50 opacity-0 md:pt-64"
    id="layout-header"
>
    <div class="container-main relative flex items-center">
        {
            !logoless && (
                <a
                    href="/"
                    class={`px-gutter pointer-events-auto flex h-36 w-237 items-center ${white ? "text-white" : "text-black"}`}
                >
                    <LogoTypo className="size-full" />
                </a>
            )
        }
        {
            blok && (
                <div class="px-gutter pointer-events-auto relative z-[2] ml-auto">
                    <button
                        id="menu-button"
                        class="text-cta16 font-space relative flex cursor-pointer px-16 py-16 text-white transition-transform duration-100 ease-out will-change-transform active:scale-[0.95] sm:px-24"
                    >
                        <div class="bg-orange absolute top-0 left-0 size-full rounded-full" />
                        <div class="absolute top-0 left-0 size-full overflow-hidden rounded-full">
                            <div
                                class="bg-pink menu-btn-layers size-full rounded-full will-change-transform"
                                style="transform: translate3d(calc(-100%*var(--offset)),0,0); --offset: 1;"
                            />
                        </div>
                        <div class="absolute top-0 left-0 size-full overflow-hidden rounded-full">
                            <div
                                class="bg-blue menu-btn-layers size-full rounded-full will-change-transform"
                                style="transform: translate3d(calc(-100%*var(--offset)),0,0); --offset: 1;"
                            />
                        </div>
                        <div class="absolute top-0 left-0 size-full overflow-hidden rounded-full">
                            <div
                                class="bg-green menu-btn-layers size-full rounded-full shadow-[0_0_0_1px_var(--color-green)] will-change-transform"
                                style="transform: translate3d(calc(-101%*var(--offset)),0,0); --offset: 1;"
                            />
                        </div>
                        <div class="absolute top-0 left-0 size-full overflow-hidden rounded-full">
                            <div
                                class="bg-blue menu-btn-layer-open size-full rounded-full shadow-[0_0_0_1px_var(--color-blue)] will-change-transform"
                                style="transform: translate3d(calc(-101%*var(--offset)),0,0); --offset: 1;"
                            />
                        </div>
                        <div class="relative">
                            <div class="hidden items-center gap-10 sm:flex">
                                <span>{blok.label}</span>
                                <Icon name="open" size="16" />
                            </div>
                            <div class="sm:hidden">
                                <Icon name="menu" size="16" />
                            </div>
                        </div>
                    </button>
                </div>
            )
        }
        {
            blok && (
                <div
                    id="header-menu"
                    data-open="false"
                    class="bg-green right-gutter left-gutter pointer-events-auto invisible absolute top-[-0.8rem] z-[1] origin-top-right scale-x-[0.95] scale-y-[0.7] rounded-[3rem] py-70 pr-70 pl-70 text-white opacity-0 sm:left-auto sm:pr-170 lg:py-75 lg:pr-270 lg:pl-110"
                >
                    {blok.links.length && (
                        <ul class="font-space text-cta32 flex flex-col font-medium lg:text-[6.4rem]/[8.8rem]">
                            {blok.links.map((link: SbBlokData) => (
                                <li class="lg:mt-[-1rem]">
                                    <Link
                                        className="header-menu-item"
                                        link={link.link}
                                    >
                                        <div
                                            set:html={splitRoll(
                                                link.label as string,
                                            )}
                                        />
                                    </Link>
                                </li>
                            ))}
                        </ul>
                    )}
                    <LangSwitcher alternates={alternates} />
                    <svg
                        class="absolute bottom-24 left-24 size-40 lg:size-74"
                        viewBox="0 0 75 75"
                        fill="currentColor"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path d="M20.885 64.5a8 8 0 0 1-5.657-2.343l-2.385-2.385a8 8 0 0 1-2.343-5.657V3a3 3 0 0 0-3-3h-4a3 3 0 0 0-3 3v68.5a3 3 0 0 0 3 3H72a3 3 0 0 0 3-3v-4a3 3 0 0 0-3-3H20.885Z" />
                    </svg>
                </div>
            )
        }
    </div>
</header>

<script>
    const DIST_TO_HIDE_HEADER = 1;
    let headerIsShown = true;
    let st: ScrollTrigger;
    let tlOpen: gsap.core.Timeline;
    let tlClose: gsap.core.Timeline;
    let tlButtonHover: gsap.core.Timeline;
    let tlButtonUnhover: gsap.core.Timeline;
    let button: HTMLElement | null;
    let menuItems: NodeListOf<HTMLElement> | null;
    let menu: HTMLElement | null;
    let menuBtnLayers: NodeListOf<HTMLElement> | null;
    let menuBtnLayerOpen: HTMLElement | null;

    const openMenu = (m: HTMLElement) => {
        tlClose?.kill();
        tlOpen = gsap
            .timeline()
            .to(m, {
                autoAlpha: 1,
                duration: 0.3,
                ease: "power3",
            })
            .to(
                m,
                {
                    scaleY: 1,
                    scaleX: 1,
                    duration: 0.6,
                    ease: "elastic(1.2, 0.7)",
                },
                "<",
            )
            .to(
                button,
                {
                    color: "#181817",
                    duration: 0.4,
                    ease: "power3.out",
                },
                "<",
            )
            .to(
                menuBtnLayerOpen,
                {
                    "--offset": 0,
                    duration: 0.4,
                    ease: "power3.out",
                },
                "<",
            );
        m.dataset.open = "true";
    };

    const closeMenu = (m: HTMLElement) => {
        tlOpen?.kill();
        tlClose = gsap
            .timeline()
            .to(m, {
                scaleY: 0.7,
                scaleX: 0.95,
                autoAlpha: 0,
                duration: 0.1,
                ease: "power3",
            })
            .to(
                button,
                {
                    color: "#F8F7EC",
                    duration: 0.2,
                    ease: "power3.out",
                },
                "<",
            )
            .to(
                menuBtnLayerOpen,
                {
                    "--offset": 1,
                    duration: 0.2,
                    ease: "power3.out",
                },
                "<",
            );
        m.dataset.open = "false";
    };

    const toggleMenu = () => {
        if (!menu) return;

        const open = menu.dataset.open === "true";

        if (open) {
            closeMenu(menu);
        } else {
            openMenu(menu);
        }
    };

    const menuItemHover = (e: MouseEvent) => {
        const target = e.target as HTMLElement | null;
        if (!target) return;

        const letters = target.querySelectorAll(".roll-letter");

        const tl = gsap.timeline().fromTo(
            letters,
            { yPercent: 0 },
            {
                yPercent: -100,
                stagger: 0.03,
                duration: 1,
                ease: "elastic(1.1, 0.9)",
            },
        );
    };

    const menuButtonHover = (e: MouseEvent) => {
        const target = e.target as HTMLElement | null;
        if (!target || !menuBtnLayers) return;
        if (tlButtonUnhover) tlButtonUnhover.kill();
        tlButtonHover = gsap.timeline().to(menuBtnLayers, {
            stagger: 0.1,
            duration: 0.4,
            "--offset": 0,
            ease: "power3.inOut",
        });
    };

    const menuButtonUnhover = (e: MouseEvent) => {
        if (!menuBtnLayers || !menu || menu.dataset.open === "true") return;
        if (tlButtonHover) tlButtonHover.kill();
        tlButtonUnhover = gsap.timeline().to([...menuBtnLayers].reverse(), {
            stagger: 0.1,
            duration: 0.4,
            "--offset": 1,
            ease: "power3.inOut",
        });
    };

    const initButtonStates = () => {
        if (!button) return;
        button.addEventListener("mouseenter", menuButtonHover);
        button.addEventListener("mouseleave", menuButtonUnhover);
    };

    const init = () => {
        const header = document.querySelector("#layout-header");
        menu = document.querySelector("#layout-header #header-menu");

        if (!header || !menu) return;
        button = document.querySelector("#layout-header #menu-button");
        menuBtnLayers = document.querySelectorAll(
            "#layout-header #menu-button .menu-btn-layers",
        );
        menuBtnLayerOpen = document.querySelector(
            "#layout-header #menu-button .menu-btn-layer-open",
        );
        menuItems = document.querySelectorAll(
            "#layout-header .header-menu-item",
        );

        st = ScrollTrigger.create({
            trigger: "body",
            start: "top top",
            onUpdate: (self) => {
                if (
                    self.direction > 0 &&
                    self.scroll() > DIST_TO_HIDE_HEADER &&
                    headerIsShown
                ) {
                    headerIsShown = false;
                    gsap.to(header, {
                        y: "-100%",
                        duration: 0.6,
                        opacity: 1,
                        overwrite: true,
                        ease: "power4.out",
                    });
                } else if (self.direction < 0 && !headerIsShown) {
                    headerIsShown = true;
                    gsap.to(header, {
                        y: "0%",
                        duration: 0.6,
                        opacity: 1,
                        overwrite: true,
                        ease: "power4.out",
                    });
                }
            },
        });

        initButtonStates();

        menuItems.forEach((mi) => {
            mi.addEventListener("mouseenter", menuItemHover);
        });
        button?.addEventListener("click", toggleMenu);
    };

    const cleanup = () => {
        st.kill();
        button?.removeEventListener("click", toggleMenu);
        menuItems?.forEach((mi) => {
            mi.removeEventListener("mouseenter", menuItemHover);
        });
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
    document.addEventListener("astro:page-load", () => {
        init();
    });
</script>
