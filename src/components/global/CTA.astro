---
import Link from "./Link.astro";
import { Icon } from "astro-icon/components";

interface StoryblokLink {
    cached_url?: string;
    url?: string;
    linktype?: string;
    target?: string;
}

interface Props {
    label?: string;
    icon?: string;
    link?: StoryblokLink;
    onClick?: string;
    className?: string;
    color?: "orange" | "green" | "blue";
}

const {
    label,
    icon,
    link,
    onClick,
    className = "",
    color = "orange",
    ...attrs
} = Astro.props;

const textColor = {
    orange: "white",
    green: "white",
    blue: "black",
};

const hoverColor = {
    orange: "green",
    green: "orange",
    blue: "pink",
};

const horizontalPadding = label ? "px-24" : "px-16";
const baseClasses = `cta-btn relative z-[0]  py-16 ${horizontalPadding} text-${textColor[color]}`;
---

{
    link ? (
        <Link link={link} className={`${baseClasses} ${className}`} {...attrs}>
            <div class="cta-text flex items-center gap-10 opacity-0">
                {label && (
                    <span class="font-space text-cta16 font-medium">
                        {label}
                    </span>
                )}
                {icon && <Icon name={icon} size="16" />}
            </div>
            <div
                class={`cta-bg absolute inset-0 z-[-1] flex flex-col overflow-hidden rounded-[9rem] bg-${color} opacity-0`}
            >
                <div class={`cta-inner-bg size-full shrink-0 bg-${color} `} />
                <div
                    class={`cta-inner-bg bg-${hoverColor[color]} size-full shrink-0`}
                />
            </div>
        </Link>
    ) : (
        <button
            type="button"
            class={`${baseClasses} ${className} cursor-pointer`}
            onclick={onClick}
        >
            <div class="cta-text flex items-center gap-10 opacity-0">
                {label && (
                    <span class="font-space text-cta16 font-medium">
                        {label}
                    </span>
                )}
                {icon && <Icon name={icon} size="16" />}
            </div>
            <div
                class={`cta-bg absolute inset-0 z-[-1] flex flex-col overflow-hidden rounded-[9rem] bg-${color} opacity-0`}
            >
                <div class={`cta-inner-bg size-full shrink-0 bg-${color}`} />
                <div
                    class={`cta-inner-bg bg-${hoverColor[color]} size-full shrink-0`}
                />
            </div>
        </button>
    )
}

<script>
    let ctas: NodeListOf<HTMLElement> | null;
    let appearTls: gsap.core.Timeline[] = [];
    let hoverTls: { [key: string]: gsap.core.Timeline } = {};
    let unhoverTls: { [key: string]: gsap.core.Timeline } = {};

    const onCTAUnhover = (e: MouseEvent) => {
        const target = e.target as HTMLElement | null;
        if (!target || window.innerWidth < 1024) return;

        const bgInner = target.querySelectorAll(".cta-inner-bg");
        const bg = target.querySelector(".cta-bg");

        const ctaId = target.dataset.ctaid;
        if (ctaId) {
            const hoverTl = hoverTls[ctaId];
            if (hoverTl) hoverTl.kill();
        }

        const tl = gsap
            .timeline()
            .to(
                bgInner,
                {
                    y: 0,
                    duration: 0.2,
                    ease: "power3.inOut",
                },
                "start",
            )
            .to(
                bg,
                {
                    scale: 1,
                    duration: 1,
                    ease: "elastic.out(1.2,0.7)",
                },
                "start",
            );

        if (ctaId) unhoverTls[ctaId] = tl;
    };

    const onCTAHover = (e: MouseEvent) => {
        const target = e.target as HTMLElement | null;
        if (!target || window.innerWidth < 1024) return;

        const bg = target.querySelector(".cta-bg");
        const bgInner = target.querySelectorAll(".cta-inner-bg");

        const ctaId = target.dataset.ctaid;
        if (ctaId) {
            const unhoverTl = unhoverTls[ctaId];
            if (unhoverTl) unhoverTl.kill();
        }

        const tl = gsap
            .timeline()
            .fromTo(
                bg,
                { scale: 1 },
                {
                    scale: 1.12,
                    duration: 0.1,
                    ease: "power2",
                },
                "start",
            )
            .to(
                bg,
                {
                    scale: 1,
                    duration: 1,
                    ease: "elastic.out(1.2,0.7)",
                },
                ">",
            )
            .to(
                bgInner,
                {
                    y: "-100%",
                    duration: 0.3,
                    ease: "power3.out",
                },
                "start",
            );

        if (ctaId) hoverTls[ctaId] = tl;
    };

    const initLinksAppear = (cta: HTMLElement) => {
        if (!cta) return;

        const text = cta.querySelector(".cta-text");
        const bg = cta.querySelector(".cta-bg");

        if (window.innerWidth < 1024) {
            gsap.set([text, bg], {
                opacity: 1,
            });
            return;
        }

        gsap.timeline()
            .set(text, {
                opacity: 0,
                scale: 0.3,
            })
            .set(bg, {
                opacity: 0,
                scale: 0.7,
            });

        const tl = gsap
            .timeline({
                scrollTrigger: {
                    trigger: cta,
                    start: "top 90%",
                    end: "bottom top",
                },
            })
            .to(
                text,
                {
                    duration: 0.4,
                    scale: 1,
                    opacity: 1,
                    ease: "power2.out",
                },
                "start",
            )
            .to(
                bg,
                {
                    duration: 0.4,
                    opacity: 1,
                    ease: "power2.out",
                },
                "start",
            )
            .to(
                bg,
                {
                    duration: 1,
                    scale: 1,
                    ease: "elastic.out(1.2,0.7)",
                },
                "start",
            );

        appearTls.push(tl);
    };

    const init = () => {
        ctas = document.querySelectorAll(".cta-btn");
        if (!ctas) return;

        ctas.forEach((cta, index) => {
            initLinksAppear(cta);
            cta.dataset.ctaid = index.toString();
            cta.addEventListener("mouseenter", onCTAHover);
            cta.addEventListener("mouseleave", onCTAUnhover);
        });
    };

    const cleanup = () => {
        ctas?.forEach((l) => {
            l.removeEventListener("mouseenter", onCTAHover);
            l.removeEventListener("mouseleave", onCTAUnhover);
        });
        appearTls?.forEach((tl) => {
            tl.kill();
        });
        appearTls = [];
        unhoverTls = {};
        hoverTls = {};
        ctas = null;
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:page-load", () => {
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
