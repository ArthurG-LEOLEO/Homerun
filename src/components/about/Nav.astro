---
import { Icon } from "astro-icon/components";
import { useTranslations } from "../../i18n/utils";

const lang = Astro.currentLocale;
const t = useTranslations(lang);

const items = [
    {
        label: t("about.nav.people"),
        bg: "black",
        text: "#f8f7ec",
    },
    {
        label: t("about.nav.clients"),
        bg: "blue",
        text: "#181817",
    },
    {
        label: t("about.nav.approach"),
        bg: "white",
        text: "#181817",
    },
    {
        label: t("about.nav.sports"),
        bg: "green",
        text: "#f8f7ec",
    },
    {
        label: t("about.nav.worldwide"),
        bg: "pink",
        text: "#181817",
    },
    {
        label: t("about.nav.mindset"),
        bg: "orange",
        text: "#f8f7ec",
    },
    {
        label: t("about.nav.tomorrows"),
        bg: "black",
        text: "#f8f7ec",
    },
];
---

<div
    id="about-nav"
    style="--active-index: 0;"
    class="pointer-events-none absolute top-0 right-0 left-0 z-10 h-[100vh] w-full text-white select-none lg:z-[auto] lg:!text-white"
>
    <div
        class="pointer-events-auto relative h-56 w-full lg:pointer-events-none lg:flex lg:h-full lg:items-center"
        id="about-nav-white"
        style="--open: 0;"
    >
        <div
            class="container-main flex h-full items-center py-8 lg:h-auto lg:justify-between lg:py-100"
        >
            <div class="absolute inset-0 z-[-1] overflow-hidden lg:hidden">
                {
                    items.map((item, index) => (
                        <div
                            class="size-full translate-y-[calc(-100%*var(--active-index))]"
                            style={{
                                backgroundColor: `var(--color-${item.bg})`,
                            }}
                        />
                    ))
                }
            </div>
            <div
                class="px-gutter py-8 text-[2rem]/[2.4rem] font-medium uppercase lg:py-0 lg:text-[3.2rem]/[3.8rem]"
            >
                {t("about.nav.creative")}
            </div>
            <div
                class="lg:px-gutter ml-auto h-full overflow-hidden lg:ml-0 lg:h-auto lg:overflow-auto"
            >
                <ul
                    class="flex translate-y-[calc(-3.2rem*var(--active-index))] flex-col items-end lg:translate-y-0"
                >
                    {
                        items.map((item, index) => (
                            <li
                                style={{
                                    "--active": Number(index === 0),
                                    "--i-before": index,
                                    "--i-after": items.length - index - 1,
                                }}
                                data-active={index === 0}
                                data-index={index}
                                data-color={item.text}
                                class="nav-items mt-8 text-[2rem]/[2.4rem] lg:mt-0 lg:pt-[calc((28rem-(var(--i-before)*1.9rem))*var(--active))] lg:pb-[calc((28rem-(var(--i-after)*1.9rem))*var(--active))] lg:text-[calc(1.6rem+(1.6rem*var(--active)))]/[1.2]"
                            >
                                <button
                                    data-order={index + 1}
                                    class="pointer-events-none cursor-pointer font-medium uppercase lg:pointer-events-auto"
                                >
                                    {item.label}
                                </button>
                            </li>
                        ))
                    }
                </ul>
            </div>
            <div class="px-gutter lg:hidden">
                <Icon
                    name="arrow-circle"
                    class="rotate-[calc(180deg*var(--open))] transition-[rotate] duration-400 ease-[cubic-bezier(0.34,1.56,0.64,1)]"
                    size="28"
                />
            </div>
        </div>
    </div>
    <div
        class="invisible absolute top-56 right-0 left-0 z-[-1] origin-top scale-y-[0.9] opacity-0 lg:hidden"
        id="about-navbar-mobile"
    >
        {
            items.map((item, index) => (
                <button
                    class="pointer-events-auto flex h-[calc(5.6rem*var(--show))] w-full items-center justify-end overflow-hidden pr-58 text-[1.6rem] font-medium uppercase transition-[height] nth-[var(--active-index)]:hidden"
                    style={{
                        backgroundColor: `var(--color-${item.bg})`,
                        color: item.text,
                        "--show": index === 0 ? "0" : "1",
                    }}
                    data-order={index + 1}
                >
                    {item.label}
                </button>
            ))
        }
    </div>
    <div
        id="about-navbar-mobile-overlay"
        class="pointer-events-auto invisible absolute top-0 right-0 bottom-0 left-0 z-[-2] bg-black/70 opacity-0 lg:hidden"
    >
    </div>
    <div
        id="about-nav-black"
        style="polygon(0 100%, 100% 100%, 100% 100%, 0 100%);"
        class="absolute inset-0 hidden size-full items-center lg:flex"
    >
        <div
            class="container-main flex items-center justify-between py-100 text-black"
        >
            <div class="px-gutter text-[3.2rem]/[3.8rem] font-medium uppercase">
                {t("about.nav.creative")}
            </div>
            <div class="px-gutter">
                <ul class="flex flex-col items-end">
                    {
                        items.map((item, index) => (
                            <li
                                style={{
                                    "--active": Number(index === 0),
                                    "--i-before": index,
                                    "--i-after": items.length - index - 1,
                                }}
                                data-active={index === 0}
                                data-index={index}
                                data-color={item.text}
                                class="nav-items pt-[calc((28rem-(var(--i-before)*1.9rem))*var(--active))] pb-[calc((28rem-(var(--i-after)*1.9rem))*var(--active))] text-[calc(1.6rem+(1.6rem*var(--active)))]/[1.2]"
                            >
                                <button
                                    data-order={index + 1}
                                    class="pointer-events-auto cursor-pointer font-medium uppercase"
                                >
                                    {item.label}
                                </button>
                            </li>
                        ))
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

<script>
    // TODO: remove comments when done
    // full height = 800px
    // padding-top = 280 - nb item before * 19
    // padding-bottom = 280 - nb item after * 19

    let pin: gsap.core.Timeline | null;
    let tlOpen: gsap.core.Timeline | null;
    let tlClose: gsap.core.Timeline | null;

    let navbarMobileOpen = false;

    let nav: Element | null;
    let navbarMobile: HTMLElement | null;
    let navbarMobileMenu: Element | null;
    let navbarMobileOverlay: Element | null;
    let navItems: NodeListOf<HTMLElement> | null;
    let navButtons: NodeListOf<HTMLElement> | null;
    let navbarMobileItems: NodeListOf<HTMLElement> | null;

    const openMenu = () => {
        tlClose?.kill();
        navbarMobile?.style.setProperty("--open", "1");
        tlOpen = gsap
            .timeline()
            .to(navbarMobileMenu, {
                autoAlpha: 1,
                scaleY: 1,
                duration: 0.6,
                ease: "elastic(1.2, 0.7)",
            })
            .to(
                navbarMobileOverlay,
                {
                    autoAlpha: 1,
                    duration: 0.3,
                    ease: "power3",
                },
                "<",
            );
    };
    const closeMenu = () => {
        tlOpen?.kill();
        navbarMobile?.style.setProperty("--open", "0");
        tlClose = gsap
            .timeline()
            .to(navbarMobileMenu, {
                autoAlpha: 0,
                scaleY: 0.9,
                duration: 0.2,
                ease: "power3",
            })
            .to(
                navbarMobileOverlay,
                {
                    autoAlpha: 0,
                    duration: 0.3,
                    ease: "power3",
                },
                "<",
            );
    };

    const onSectionChange = (e: any) => {
        const index = parseInt(e.detail) - 1;

        if (!navItems || !navItems[index] || !nav) return;

        const currentItem = [...navItems].filter((ni) => {
            return (
                ni.dataset.index &&
                parseInt(ni.dataset.index) === index &&
                ni.dataset.index !== "true"
            );
        });

        if (!currentItem.length) return;

        gsap.to(nav, {
            "--active-index": index,
            duration: 0.4,
            ease: "power3.inOut",
            color: navItems[index].dataset.color,
        });

        const prevActiveItem: NodeListOf<HTMLElement> | null =
            nav.querySelectorAll(".nav-items[data-active='true']");

        if (prevActiveItem) {
            prevActiveItem.forEach((pi) => {
                pi.dataset.active = "false";
                gsap.to(pi, {
                    "--active": 0,
                    duration: 0.4,
                    ease: "power3.inOut",
                });
            });
        }

        currentItem.forEach((ci) => {
            ci.dataset.active = "true";
            gsap.to(ci, {
                "--active": 1,
                duration: 0.4,
                ease: "power3.inOut",
            });
        });

        navbarMobileItems?.forEach((nmi, i) => {
            nmi.style.setProperty("--show", index === i ? "0" : "1");
        });
    };

    const onNavItemClick = (e: MouseEvent) => {
        const target = e.target as HTMLElement | null;
        if (!target) return;

        if (window.innerWidth < 1024 && navbarMobileOpen) {
            navbarMobileOpen = false;
            closeMenu();
        }

        const order = target.dataset.order || "1";
        const sectionToScrollTo = document.querySelector(
            `#page-about .about-section[data-order="${order}"]`,
        );

        window.lenis.scrollTo(sectionToScrollTo);
    };

    const onNavbarClick = () => {
        if (window.innerWidth > 1024) return;

        navbarMobileOpen = !navbarMobileOpen;

        if (navbarMobileOpen) {
            openMenu();
        } else {
            closeMenu();
        }
    };

    const init = () => {
        nav = document.querySelector("#about-nav");
        if (!nav) return;

        navItems = nav.querySelectorAll(".nav-items");
        navButtons = nav.querySelectorAll(".nav-items button");
        navbarMobile = nav.querySelector("#about-nav-white");
        navbarMobileMenu = nav.querySelector("#about-navbar-mobile");
        navbarMobileOverlay = nav.querySelector("#about-navbar-mobile-overlay");
        navbarMobileItems = nav.querySelectorAll("#about-navbar-mobile button");

        pin = gsap.timeline({
            scrollTrigger: {
                trigger: "#about-scrolling-container",
                start: "top top",
                end: "bottom bottom",
                pin: nav,
                invalidateOnRefresh: true,
            },
        });

        nav.addEventListener("sectionchange", onSectionChange);
        navbarMobile?.addEventListener("click", onNavbarClick);
        navbarMobileOverlay?.addEventListener("click", onNavbarClick);

        navButtons.forEach((item) => {
            item.addEventListener("click", onNavItemClick);
        });
        navbarMobileItems.forEach((item) => {
            item.addEventListener("click", onNavItemClick);
        });
    };

    const cleanup = () => {
        pin?.kill();
        tlOpen?.kill();
        tlClose?.kill();
        nav?.removeEventListener("sectionchange", onSectionChange);
        navbarMobile?.removeEventListener("click", onNavbarClick);
        navbarMobileOverlay?.removeEventListener("click", onNavbarClick);

        navButtons?.forEach((item) => {
            item.removeEventListener("click", onNavItemClick);
        });
        navbarMobileItems?.forEach((item) => {
            item.removeEventListener("click", onNavItemClick);
        });
    };

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
    document.addEventListener("astro:page-load", () => {
        init();
    });
</script>
