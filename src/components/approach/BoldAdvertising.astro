---
import { renderRichText } from "@storyblok/astro";
import ArrowLink from "../atoms/ArrowLink.astro";

const { blok } = Astro.props;
---

<div id="bold-advertising">
    <div class="mb-55">
        <h2 class="text-title-2 mx-gutter mb-36">
            {blok.communication_title}
        </h2>
        <div
            class="px-gutter text-p-24 w-full"
            set:html={renderRichText(blok.communication_text)}
        />
    </div>
    <div class="flex flex-col">
        {
            blok.communication_items.split(",").map((item: string) => (
                <div class="bold-ad-item">
                    <div class="text-title-4 bold-ad-item-inner bg-white px-24 py-16 text-black md:px-32 md:py-24">
                        {item}
                    </div>
                </div>
            ))
        }
    </div>
    {
        blok.communication_link[0]?.label && (
            <ArrowLink
                label={blok.communication_link[0].label}
                link={blok.communication_link[0].link}
                className="mt-40"
            />
        )
    }
</div>

<script>
    let items: NodeListOf<HTMLElement> | null;
    let tl: gsap.core.Timeline | null;
    let tls: gsap.core.Timeline[] = [];

    const init = () => {
        const container = document.querySelector("#bold-advertising");
        if (!container) return;

        items = container.querySelectorAll("#bold-advertising .bold-ad-item");

        items?.forEach((i, index) => {
            const inverse = index % 2 !== 0 ? 1 : -1;
            const rotateOffset = 5;
            const inner = i.querySelector(".bold-ad-item-inner");
            const tl = gsap.timeline({
                scrollTrigger: {
                    id: "accordionRefreshedBA" + index,
                    trigger: i,
                    start: () =>
                        window.innerWidth > 1024 ? "top top" : "top bottom",
                    end: () =>
                        window.innerWidth > 1024
                            ? "bottom top-=100%"
                            : "bottom top",
                    scrub: true,
                    invalidateOnRefresh: true,
                },
            });
            tl.fromTo(
                inner,
                { rotate: rotateOffset * inverse, y: "50rem" },
                {
                    duration: 1,
                    rotate: -1.5 * inverse,
                    y: 0,
                    ease: "power2.out",
                },
            ).to(inner, {
                duration: 1,
                rotate: -rotateOffset * inverse,
                y: `-20rem`,
                ease: "power2.in",
            });
            tls.push(tl);
        });
    };

    const cleanup = () => {
        tls.forEach((tl) => {
            tl.kill();
        });
        tls = [];
        items = null;
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:page-load", () => {
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
