---
import { type SbBlokData, storyblokEditable } from "@storyblok/astro";
import PlanAccordionsContentItem from "./PlanAccordionsContentItem.astro";

const { blok } = Astro.props;
---

<div class="border-b border-black/20" {...storyblokEditable(blok)}>
    <button
        type="button"
        class="plan-accordion-button space-between flex w-full cursor-pointer gap-10 py-16"
        aria-expanded="false"
    >
        <div class="flex flex-1 flex-col items-start text-left">
            <p class="text-p-20">{blok.title}</p>
            {
                blok.duration && (
                    <p>
                        <span class="text-p-20">âŒ›</span>{" "}
                        <span class="text-p-16">{blok.duration}</span>
                    </p>
                )
            }
        </div>
        <div
            class="plan-accordion-icon relative size-28 flex-none rounded-full border-2 border-black lg:size-34"
        >
            <div
                class="absolute top-[calc(50%-0.1rem)] left-[calc(50%-0.6rem)] h-2 w-12 bg-black"
            ></div>
            <div
                class="plan-accordion-vertical absolute top-[calc(50%-0.6rem)] left-[calc(50%-0.1rem)] h-12 w-2 bg-black"
            ></div>
        </div>
    </button>
    <div class="plan-accordion-content h-0 overflow-hidden">
        {
            blok.content_items.map((item: SbBlokData) => (
                <PlanAccordionsContentItem blok={item} />
            ))
        }
    </div>
</div>

<script>
    let buttons: NodeListOf<Element>;
    let isInitialized = false;

    const init = () => {
        cleanup();

        buttons = document.querySelectorAll(".plan-accordion-button");

        buttons.forEach((button) => {
            const content = button.nextElementSibling as HTMLElement;
            const verticalIcon = button.querySelector(
                ".plan-accordion-vertical",
            ) as HTMLElement;

            const handleClick = (event: Event) => {
                const isExpanded =
                    button.getAttribute("aria-expanded") === "true";

                if (!isExpanded) {
                    button.setAttribute("aria-expanded", "true");
                    gsap.to(content, {
                        height: "auto",
                        duration: 0.3,
                        ease: "power2.out",
                    });
                    if (verticalIcon) {
                        gsap.to(verticalIcon, {
                            rotation: 90,
                            duration: 0.2,
                            ease: "power2.out",
                            transformOrigin: "center",
                        });
                    }
                } else {
                    button.setAttribute("aria-expanded", "false");
                    gsap.to(content, {
                        height: 0,
                        duration: 0.2,
                        ease: "power2.out",
                    });
                    if (verticalIcon) {
                        gsap.to(verticalIcon, {
                            rotation: 0,
                            duration: 0.2,
                            ease: "power2.out",
                            transformOrigin: "center",
                        });
                    }
                }
            };

            (button as any)._planAccordionClickHandler = handleClick;
            button.addEventListener("click", handleClick);
        });

        isInitialized = true;
    };

    const cleanup = () => {
        if (buttons) {
            buttons.forEach((button) => {
                if ((button as any)._planAccordionClickHandler) {
                    button.removeEventListener(
                        "click",
                        (button as any)._planAccordionClickHandler,
                    );
                    delete (button as any)._planAccordionClickHandler;
                }
            });
        }

        isInitialized = false;
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        init();
    });

    document.addEventListener("astro:page-load", () => {
        if (!isInitialized) init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
