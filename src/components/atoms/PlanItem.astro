---
import { type SbBlokData, storyblokEditable } from "@storyblok/astro";
import SBImage from "../global/SBImage.astro";
import PlanAccordionsItem from "./PlanAccordionsItem.astro";
import CTA from "../global/CTA.astro";

const {
    blok,
    from_label,
    per_period_label,
    included_label,
    choose_label,
    class: className,
} = Astro.props;

const borderColorMap = {
    green: "border-green",
    orange: "border-orange",
    blue: "border-blue",
    pink: "border-pink",
};

const backgroundColorMap = {
    green: "bg-green",
    orange: "bg-orange",
    blue: "bg-blue",
    pink: "bg-pink",
};

const beforeBackgroundTextColorMap = {
    green: "before:bg-pink text-black",
    orange: "before:bg-blue text-black",
    blue: "before:bg-orange text-white",
    pink: "before:bg-green text-white",
};

const borderColor =
    borderColorMap[blok.border_color as keyof typeof borderColorMap] ||
    "border-black";
const backgroundBorderColor =
    backgroundColorMap[blok.border_color as keyof typeof borderColorMap] ||
    "bg-black";
const beforeBackgroundTextBorderColor =
    beforeBackgroundTextColorMap[
        blok.border_color as keyof typeof borderColorMap
    ] || "before:bg-black text-white";

// Generate unique ID for this plan item
const planCtaId = `plan-cta-${Math.random().toString(36).substr(2, 9)}`;
---

<div
    class={`relative border-12 ${borderColor} bg-[#ffffff] px-30 pb-40 z-[1] ${className || ""}`}
    {...storyblokEditable(blok)}
    data-contact-url="/contact"
    data-plan-title={blok.title}
    data-plan-cta-id={planCtaId}
>
    <!-- header -->
    <div
        class={`absolute top-0 left-0 right-0 w-132 h-60 mx-auto rounded-b-[4rem] -z-[1] ${backgroundBorderColor} lg:w-164 lg:h-72 lg:rounded-b-[4.8rem]`}
    >
    </div>
    <div
        class="relative mx-auto -mt-58 size-94 before:absolute before:-bottom-12 before:left-2 before:z-[-1] before:size-68 before:rounded-full before:bg-black before:opacity-10 before:mix-blend-multiply before:blur-[0.6rem] before:content-[''] lg:-mt-64 lg:size-117 lg:before:-bottom-16 lg:before:size-84"
    >
        <SBImage class="size-full object-contain" image={blok.ball_image} />
    </div>
    <div class="mx-auto mt-52 h-73 w-155 lg:h-90 lg:w-195">
        <SBImage
            class="size-full object-contain"
            image={blok.title_image}
            aria-label={blok.title}
        />
    </div>
    <div class="mt-18 flex -rotate-2 flex-col items-center lg:mt-30">
        <p class="text-p14 text-center">{from_label}</p>
        <div class="flex justify-center">
            <div
                class={`relative before:absolute before:top-0 before:-right-6 before:bottom-0 before:-left-6 before:-z-[1] before:-rotate-3 ${beforeBackgroundTextBorderColor}`}
            >
                <span class="text-title-4">{blok.price}</span>
                <span class="text-p16 md:text-p24">{per_period_label}</span>
            </div>
        </div>
    </div>
    <!-- content -->
    <div class="mt-18 lg:mt-30">
        <p class="text-p14">{included_label}</p>
    </div>
    {
        blok.plan_accordions && blok.plan_accordions.length > 0 && (
            <div class="flex flex-col">
                {blok.plan_accordions.map((item: SbBlokData) => (
                    <PlanAccordionsItem blok={item} />
                ))}
            </div>
        )
    }
    <div class="mt-18 lg:mt-30">
        <CTA
            id={planCtaId}
            label={choose_label}
            color="green"
            type="button"
            icon="arrow-right"
        />
    </div>
</div>

<script>
    const handlePlanCtaClick = (event: Event) => {
        const target = event.target as HTMLElement;
        if (!target) return;

        // Find the closest plan container from the clicked CTA
        const planContainer = target.closest("[data-plan-title]");
        if (!planContainer) return;

        const contactUrl = planContainer.getAttribute("data-contact-url");
        const planTitle = planContainer.getAttribute("data-plan-title");

        if (!contactUrl || !planTitle) return;

        // Detect current language from URL
        const currentPath = window.location.pathname;
        const langMatch = currentPath.match(/^\/([a-z]{2})\//);
        const currentLang = langMatch ? langMatch[1] : "";

        // Construct contact URL with proper language prefix
        const finalContactUrl = currentLang
            ? `/${currentLang}/contact`
            : contactUrl;
        const fullContactUrl = new URL(finalContactUrl, location.origin);
        fullContactUrl.searchParams.append("planTitle", planTitle);

        window.location.href = fullContactUrl.toString();
    };

    const init = () => {
        // Find all plan containers on the page
        const planContainers = document.querySelectorAll("[data-plan-cta-id]");

        planContainers.forEach((container) => {
            const ctaId = container.getAttribute("data-plan-cta-id");
            if (ctaId) {
                const cta = document.getElementById(ctaId);
                if (cta) {
                    cta.addEventListener("click", handlePlanCtaClick);
                }
            }
        });
    };

    const cleanup = () => {
        // Find all plan containers on the page and remove event listeners
        const planContainers = document.querySelectorAll("[data-plan-cta-id]");

        planContainers.forEach((container) => {
            const ctaId = container.getAttribute("data-plan-cta-id");
            if (ctaId) {
                const cta = document.getElementById(ctaId);
                if (cta) {
                    cta.removeEventListener("click", handlePlanCtaClick);
                }
            }
        });
    };

    document.addEventListener("astro:page-load", () => {
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
