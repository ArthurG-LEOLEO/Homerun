---
import SBVideo from "../../components/global/SBVideo.astro";
import TitleER from "./TitleER.astro";
import TitleHOMUN from "./TitleHOMUN.astro";

import { splitText } from "../../utils/splitString";
import BaselineCreative from "./BaselineCreative.astro";
import BaselineThings from "./BaselineThings.astro";
import HeroTitle from "./HeroTitle.astro";

const { blok } = Astro.props;
---

<div id="home-hero" class="relative">
    <div
        style="color: #181817;"
        id="home-hero-texts"
        class="relative flex h-[100vh] flex-col bg-black pt-[42vh] 2xl:justify-end 2xl:pt-0 2xl:pb-200"
    >
        <div
            class="flex w-full justify-center px-[calc(var(--spacing-gutter)*2)]"
        >
            <div class="flex w-full justify-center" id="home-hero-title">
                <HeroTitle />
            </div>

            <!-- <div class="relative w-full" id="home-hero-title">
                <div
                    class="absolute top-0 left-0 z-10 flex w-full justify-center"
                >
                    <div class="home-hero-title w-full">
                        <TitleER />
                    </div>
                </div>
                <div class="relative z-[8] flex w-full justify-center">
                    <div class="home-hero-title w-full">
                        <TitleHOMUN />
                    </div>
                </div>
            </div> -->
        </div>
        <div
            id="home-hero-baseline"
            class="mt-[1vw] flex w-full justify-center gap-[2vw]"
        >
            <div
                class="flex justify-end overflow-hidden"
                id="baseline-creative"
            >
                <BaselineCreative />
            </div>

            <div
                class="flex justify-start overflow-hidden"
                id="baseline-things"
            >
                <BaselineThings />
            </div>
        </div>
        <div
            id="home-hero-overlay"
            class="absolute top-0 right-0 bottom-0 left-0 z-[1] origin-bottom bg-white"
        >
        </div>
    </div>

    <div
        id="home-video-layer-2"
        style="transform: translateY(-120%) rotate(6deg) scale(0.99);"
        class="bg-orange absolute top-0 right-0 z-[9] h-144 w-230 origin-center transition-all duration-0 ease-linear lg:h-[15vw] lg:w-[24vw]"
    >
    </div>
    <div
        id="home-video-layer-1"
        style="transform: translateY(-120%) rotate(6deg) scale(0.99);"
        class="bg-blue absolute top-0 right-0 z-[9] h-144 w-230 origin-center transition-all duration-0 ease-linear lg:h-[15vw] lg:w-[24vw]"
    >
    </div>
    <div
        id="home-hero-video"
        style="transform: translateY(-120%) rotate(6deg);"
        class="lg absolute top-0 right-0 z-[9] h-144 w-230 origin-center bg-black lg:h-[15vw] lg:w-[24vw]"
    >
        <SBVideo
            video={blok.showreel_video}
            className="absolute inset-0 h-full w-full object-cover"
        />
        <div
            class="absolute inset-0 bg-black/30 opacity-0"
            id="home-video-overlay"
        >
        </div>
    </div>
    <div class="h-[100vh] w-full bg-black text-white" id="home-video-holder">
        <div
            id="home-hero-video-title"
            class="container-main relative z-10 flex size-full h-[100vh] w-[100vw] items-center justify-center"
        >
            <h2
                class="text-title-2 px-gutter w-8/12 text-center"
                set:html={splitText(blok.showreel_title)}
            />
        </div>
    </div>
</div>

<script>
    let banner: HTMLElement | null;
    let header: HTMLElement | null;

    let videoHolder: HTMLElement | null;
    let video: HTMLElement | null;
    let videoLayer1: HTMLElement | null;
    let videoLayer2: HTMLElement | null;
    let videoOverlay: HTMLElement | null;
    let baseline: HTMLElement | null;
    let title: NodeListOf<Element> | null;
    let titleLettersHom: NodeListOf<Element> | null;
    let titleLettersEr: NodeListOf<Element> | null;
    let titleLettersUn: NodeListOf<Element> | null;
    let titleInnerLettersHom: NodeListOf<Element> | null;
    let titleInnerLettersEr: NodeListOf<Element> | null;
    let titleInnerLettersUn: NodeListOf<Element> | null;
    let overlay: HTMLElement | null;
    let heroTexts: HTMLElement | null;
    let baselineCreative: HTMLElement | null;
    let baselineThings: HTMLElement | null;
    let baselineCreativeLetters: NodeListOf<Element> | null;
    let baselineThingsLetters: NodeListOf<Element> | null;
    let videoTextWords: NodeListOf<Element> | null;
    let videoWithLayers: Array<HTMLElement | null> | null;

    let tlVideo: gsap.core.Timeline | null;
    let tlVideoText: gsap.core.Timeline | null;
    let tlBaseline: gsap.core.Timeline | null;

    const setVariables = () => {
        overlay = document.querySelector("#home-hero #home-hero-overlay");
        banner = document.querySelector("#layout-banner");
        header = document.querySelector("#layout-header");
        heroTexts = document.querySelector("#home-hero #home-hero-texts");

        title = document.querySelectorAll("#home-hero .home-hero-title");
        titleLettersHom = document.querySelectorAll(
            "#home-hero #home-hero-title .letters-hom",
        );
        titleLettersEr = document.querySelectorAll(
            "#home-hero #home-hero-title .letters-er",
        );
        titleLettersUn = document.querySelectorAll(
            "#home-hero #home-hero-title .letters-un",
        );
        titleInnerLettersHom = document.querySelectorAll(
            "#home-hero #home-hero-title .title-inner-letter-hom",
        );
        titleInnerLettersEr = document.querySelectorAll(
            "#home-hero #home-hero-title .title-inner-letter-er",
        );
        titleInnerLettersUn = document.querySelectorAll(
            "#home-hero #home-hero-title .title-inner-letter-un",
        );

        baseline = document.querySelector("#home-hero #home-hero-baseline");
        baselineCreative = document.querySelector(
            "#home-hero #home-hero-baseline #baseline-creative",
        );
        baselineThings = document.querySelector(
            "#home-hero #home-hero-baseline #baseline-things",
        );
        baselineCreativeLetters = document.querySelectorAll(
            "#home-hero #home-hero-baseline #baseline-creative g",
        );
        baselineThingsLetters = document.querySelectorAll(
            "#home-hero #home-hero-baseline #baseline-things g",
        );

        videoHolder = document.querySelector("#home-hero #home-video-holder");

        video = document.querySelector("#home-hero #home-hero-video");
        videoLayer1 = document.querySelector("#home-hero #home-video-layer-1");
        videoLayer2 = document.querySelector("#home-hero #home-video-layer-2");
        videoWithLayers = [video, videoLayer1, videoLayer2];

        videoTextWords = document.querySelectorAll(
            "#home-hero #home-video-holder .word",
        );
        videoOverlay = document.querySelector("#home-hero #home-video-overlay");
    };
    const init = () => {
        const wrapper = document.querySelector("#home-hero");
        if (!wrapper) return;

        setVariables();

        gsap.timeline()
            .set(banner, {
                y: "-100%",
            })
            .set(header, {
                y: -50,
                opacity: 0,
            })
            .set(title, {
                width: "30%",
            })
            .set(title, {
                y: (i, target) => {
                    const ww = window.innerWidth;
                    const wh = window.innerHeight;
                    const titleHeight = target.offsetHeight;

                    if (ww < 1536) {
                        console.log("set: ", titleHeight / -2 + wh * 0.08);

                        return titleHeight / -2 + wh * 0.08;
                    } else {
                        const heroPaddingBottom = ww * 0.13888;
                        const baselineHeight = ww * 0.042;

                        return (
                            heroPaddingBottom +
                            baselineHeight +
                            titleHeight / 2 -
                            wh / 2
                        );
                    }
                },
            })
            .set(videoOverlay, {
                opacity: 0,
            })
            .set(videoTextWords, {
                opacity: 0,
                x: -20,
            })
            .set(videoWithLayers, {
                rotate: 6,
                y: "-120%",
            })
            .set([baselineCreativeLetters, baselineThingsLetters], {
                y: "50%",
            })
            .set(videoLayer1, {
                transitionDuration: 0.03,
            })
            .set(videoLayer2, {
                transitionDuration: 0.06,
            });

        tlBaseline = gsap
            .timeline()
            .to(
                [titleLettersHom, titleLettersEr, titleLettersUn],
                {
                    y: 0,
                    stagger: 0.1,
                    duration: 0.8,
                    ease: "power4.out",
                },
                "before",
            )
            .to(
                [titleLettersHom, titleLettersEr, titleLettersUn],
                {
                    opacity: 0,
                    stagger: 0.1,
                    duration: 0.3,
                    ease: "linear",
                },
                "before+=0.7",
            )
            .to(
                [titleLettersHom, titleLettersEr, titleLettersUn],
                {
                    opacity: 1,
                    stagger: 0.1,
                    duration: 0,
                },
                "before+=1",
            )
            .to(
                [
                    titleInnerLettersHom,
                    titleInnerLettersEr,
                    titleInnerLettersUn,
                ],
                {
                    stagger: 0.1,
                    x: 0,
                    y: 0,
                    duration: 1.3,
                    ease: "power3.inOut",
                },
                "before+=1.1",
            )
            .addLabel("start", "+=0.3")
            .to(
                overlay,
                {
                    scaleY: 0,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                banner,
                {
                    y: 0,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                header,
                {
                    y: 0,
                    opacity: 1,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                heroTexts,
                {
                    color: "#EDD4F8",
                    duration: 0.4,
                    ease: "power2.out",
                },
                "start",
            )
            .to(
                title,
                {
                    width: "100%",
                    duration: 1,
                    ease: "expo.inOut",
                    y: 0,
                },
                "start-=0.2",
            )
            .to(baselineCreativeLetters, {
                y: 0,
                duration: 0.6,
                stagger: 0.05,
                ease: "power3.out",
            })
            .to(
                baselineThingsLetters,
                {
                    y: 0,
                    duration: 0.6,
                    stagger: 0.05,
                    ease: "power3.out",
                },
                "-=0.2",
            )
            .to(
                baseline,
                {
                    gap: "62.5vw",
                    duration: 2,
                    ease: "expo.inOut",
                },
                "-=0.5",
            )
            .to(
                baselineCreative,
                {
                    x: 20,
                    duration: 2,
                    ease: "expo.inOut",
                },
                "<",
            )
            .to(
                baselineThings,
                {
                    x: -20,
                    duration: 2,
                    ease: "expo.inOut",
                },
                "<",
            )
            .to(
                baselineCreativeLetters,
                {
                    y: "-57%",
                    duration: 1,
                    stagger: 0.05,
                    ease: "power3.out",
                    delay: 0.6,
                },
                "<",
            )
            .to(
                baselineThingsLetters,
                {
                    y: "-57%",
                    duration: 1,
                    stagger: 0.05,
                    ease: "power3.out",
                    delay: 0.4,
                },
                "<",
            );

        const videoAppear = gsap.to(videoWithLayers, {
            rotate: -6,
            duration: 1.3,
            y: function () {
                const ww = window.innerWidth;
                const wh = window.innerHeight;
                const videoHeight = video ? video.offsetHeight : 0;
                if (ww >= 1536) {
                    // ww * 0.13888 = 20rem = pb-200
                    const heroPaddingBottom = ww * 0.13888;
                    const baselineHeight = ww * 0.042;
                    const titleHeight = ww * 0.1456;
                    const y =
                        wh -
                        heroPaddingBottom -
                        baselineHeight -
                        titleHeight * 0.6 -
                        videoHeight;

                    return y;
                } else {
                    return wh * 0.42 - videoHeight + ww * 0.06;
                }
            },
            ease: "elastic.out(0.8,0.7)",
            delay: 3.8,
        });

        tlVideo = gsap.timeline().fromTo(
            videoWithLayers,
            {
                rotate: -6,
                y: function () {
                    const ww = window.innerWidth;
                    const wh = window.innerHeight;
                    const videoHeight = video ? video.offsetHeight : 0;
                    if (ww >= 1536) {
                        // ww * 0.13888 = 20rem = pb-200
                        const heroPaddingBottom = ww * 0.13888;
                        const baselineHeight = ww * 0.042;
                        const titleHeight = ww * 0.1456;
                        const y =
                            wh -
                            heroPaddingBottom -
                            baselineHeight -
                            titleHeight * 0.6 -
                            videoHeight;

                        return y;
                    } else {
                        return wh * 0.42 - videoHeight + ww * 0.06;
                    }
                },
                x: function () {
                    return window.innerWidth < 500 ? "-5vw" : "-32vw";
                },
            },
            {
                duration: 1,
                scrollTrigger: {
                    trigger: videoHolder,
                    start: "top bottom",
                    end: "bottom bottom+=50%",
                    invalidateOnRefresh: true,
                    scrub: true,
                    onEnter: function () {
                        videoAppear.kill();
                    },
                },
                height: "100vh",
                width: "100vw",
                rotate: 0,
                x: 0,
                y: "100vh",
                ease: "none",
            },
        );

        tlVideoText = gsap
            .timeline({
                scrollTrigger: {
                    trigger: videoHolder,
                    start: "top 50%",
                    end: "top top",
                    scrub: true,
                },
            })
            .to(videoOverlay, {
                opacity: 1,
            })
            .to(
                videoTextWords,
                {
                    opacity: 1,
                    x: 0,
                    stagger: 0.1,
                },
                "<",
            );
    };

    const cleanup = () => {
        tlVideo?.kill();
        tlVideo = null;
        tlVideoText?.kill();
        tlVideoText = null;
        tlBaseline?.kill();
        tlBaseline = null;
        videoHolder = null;
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:page-load", () => {
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
