---
import type { SbBlokData } from "@storyblok/astro";
import ArrowLink from "../atoms/ArrowLink.astro";
import SBImage from "../global/SBImage.astro";
import { splitText } from "../../utils/splitString";

import { useTranslations } from "../../i18n/utils";

const lang = Astro.currentLocale;
const t = useTranslations(lang);

const { blok } = Astro.props;
---

<div
    class="container-main container:text-[1rem] py-120 text-center text-[1rem] md:py-180 lg:text-[0.6944444vw]"
    id="home-approach"
>
    <div
        class="text-p86-mobile px-gutter mx-auto w-full md:text-[5.5rem]/[7.4rem] lg:w-[71vw] lg:px-0 lg:text-[8.6em]/[1.27em]"
    >
        <span set:html={splitText(blok.title_first_part)} />
        <a
            class="relative inline-block"
            href={t("links.work.consulting")}
            id="first-cat"
        >
            <div
                class="absolute top-[0.2em] right-[0.8em] bottom-[0.2em] left-[0.8em] rotate-[-1.9deg]"
            >
                <div
                    id="first-cat-hl"
                    class="bg-pink size-full origin-left scale-x-0"
                >
                </div>
            </div>
            <div class="relative inline-block">
                <div
                    class="absolute top-[0.2em] right-[-0.1em] bottom-[0em] left-[-0.1em] rotate-[-2.3deg] lg:hidden"
                >
                    <div class="word-hl bg-pink size-full origin-left"></div>
                </div>

                <span
                    id="first-cat-p1"
                    style="--underline: 0;"
                    class="relative inline-block after:absolute after:right-0 after:bottom-2 after:left-0 after:h-[0.05em] after:origin-left after:scale-x-[var(--underline)] after:bg-current"
                >
                    <span class="word">
                        {blok.first_category_first_part}
                    </span>
                </span>
            </div>
            <div
                class="bubbles pointer-events-none relative inline-block h-[1.24em] w-[1.76em] align-bottom"
            >
                <div
                    class="absolute top-[50%] left-[50%] size-[1.76em] translate-[-50%]"
                >
                    {
                        blok.first_category_cases.map(
                            (
                                { asset }: { asset: SbBlokData },
                                index: number,
                            ) => (
                                <div
                                    class:list={[
                                        "absolute top-0 left-0 size-full",
                                        { "z-[-1] scale-[0.99]": index > 0 },
                                    ]}
                                    id={`fc-img-${index}`}
                                >
                                    <div
                                        class:list={[
                                            "first-cat-inner-img size-full overflow-hidden rounded-full ease-linear",
                                            {
                                                "duration-[0.05s]": index === 1,
                                                "duration-[0.1s]": index !== 1,
                                            },
                                        ]}
                                    >
                                        <SBImage
                                            class="size-full object-cover"
                                            image={asset}
                                        />
                                    </div>
                                </div>
                            ),
                        )
                    }
                </div>
            </div>
            <div class="relative inline-block">
                <div
                    class="absolute top-[0.2em] right-[-0.1em] bottom-[0em] left-[-0.1em] rotate-[0.8deg] lg:hidden"
                >
                    <div class="word-hl bg-pink size-full origin-left"></div>
                </div>

                <span
                    id="first-cat-p2"
                    style="--underline: 0;"
                    class="relative inline-block after:absolute after:right-0 after:bottom-2 after:left-0 after:h-[0.05em] after:origin-left after:scale-x-[var(--underline)] after:bg-current"
                >
                    <span class="word">
                        {blok.first_category_second_part}
                    </span>
                </span>
            </div>
        </a>
        <span set:html={splitText(blok.title_second_part)} />
        <a
            class="relative inline-block text-white lg:text-black"
            href={t("links.work.advertising")}
            id="second-cat"
        >
            <div class="relative inline-block">
                <div
                    class="absolute top-[0.2em] right-[-0.1em] bottom-[0em] left-[-0.1em] rotate-[1.1deg] lg:translate-x-[1em]"
                >
                    <div
                        id="second-cat-hl1"
                        class="word-hl bg-orange size-full origin-left lg:scale-x-0"
                    >
                    </div>
                </div>
                <span
                    id="second-cat-p1"
                    style="--underline: 0;"
                    class="relative inline-block after:absolute after:right-0 after:bottom-2 after:left-0 after:h-[0.05em] after:origin-left after:scale-x-[var(--underline)] after:bg-current"
                >
                    <span class="word">
                        {blok.second_category_first_part}
                    </span>
                </span>
            </div>
            <div
                class="bubbles pointer-events-none relative inline-block h-[1.24em] w-[1.76em] align-bottom"
            >
                <div
                    class="absolute top-[50%] left-[50%] size-[1.76em] translate-[-50%]"
                >
                    {
                        blok.second_category_cases.map(
                            (
                                { asset }: { asset: SbBlokData },
                                index: number,
                            ) => (
                                <div
                                    class:list={[
                                        "absolute top-0 left-0 size-full",
                                        { "z-[-1] scale-[0.99]": index > 0 },
                                    ]}
                                    id={`sc-img-${index}`}
                                >
                                    <div
                                        class:list={[
                                            "second-cat-inner-img size-full origin-center overflow-hidden rounded-full ease-linear",
                                            {
                                                "duration-[0.05s]": index === 1,
                                                "duration-[0.1s]": index !== 1,
                                            },
                                        ]}
                                    >
                                        <SBImage
                                            class="size-full object-cover"
                                            image={asset}
                                        />
                                    </div>
                                </div>
                            ),
                        )
                    }
                </div>
            </div>
            <div class="relative inline-block">
                <div
                    class="absolute top-[0.2em] right-[-0.1em] bottom-[0em] left-[-0.1em] z-[-1] rotate-[-1.07deg]"
                >
                    <div
                        id="second-cat-hl2"
                        class="word-hl bg-orange size-full origin-left lg:scale-x-0"
                    >
                    </div>
                </div>
                <span
                    id="second-cat-p2"
                    style="--underline: 0;"
                    class="relative after:absolute after:right-0 after:bottom-2 after:left-0 after:h-[0.05em] after:origin-left after:scale-x-[var(--underline)] after:bg-current"
                >
                    <span class="word">
                        {blok.second_category_second_part}
                    </span>
                </span>
            </div>
        </a>
        <span set:html={splitText(blok.title_third_part)} />
    </div>

    <div id="approach-link">
        <ArrowLink
            label={blok.projects_link[0].label}
            link={blok.projects_link[0].link}
            className="mt-24 md:mt-40"
        />
    </div>
</div>

<script>
    let mp = {
        x: 0,
        y: 0,
    };

    let tlAppear: gsap.core.Timeline;

    let firstCat: HTMLElement | null;
    let firstCatP1: HTMLElement | null;
    let firstCatP2: HTMLElement | null;
    let firstCatHl: HTMLElement | null;
    let firstCatImgs: NodeListOf<HTMLElement> | null;
    let fcImg1: HTMLElement | null;
    let fcImg2: HTMLElement | null;
    let fcImg3: HTMLElement | null;
    let secondCat: HTMLElement | null;
    let secondCatP1: HTMLElement | null;
    let secondCatP2: HTMLElement | null;
    let secondCatHl1: HTMLElement | null;
    let secondCatHl2: HTMLElement | null;
    let secondCatImgs: NodeListOf<HTMLElement> | null;
    let scImg1: HTMLElement | null;
    let scImg2: HTMLElement | null;
    let scImg3: HTMLElement | null;

    let wordHls: NodeListOf<HTMLElement> | null;

    let mm: gsap.MatchMedia | null;

    const setVariables = () => {
        firstCat = document.querySelector("#home-approach #first-cat");
        firstCatP1 = document.querySelector("#home-approach #first-cat-p1");
        firstCatP2 = document.querySelector("#home-approach #first-cat-p2");
        firstCatHl = document.querySelector("#home-approach #first-cat-hl");
        fcImg1 = document.querySelector("#home-approach #fc-img-0");
        fcImg2 = document.querySelector("#home-approach #fc-img-1");
        fcImg3 = document.querySelector("#home-approach #fc-img-2");
        firstCatImgs = document.querySelectorAll(
            "#home-approach .first-cat-inner-img",
        );

        secondCat = document.querySelector("#home-approach #second-cat");
        secondCatP1 = document.querySelector("#home-approach #second-cat-p1");
        secondCatP2 = document.querySelector("#home-approach #second-cat-p2");
        secondCatHl1 = document.querySelector("#home-approach #second-cat-hl1");
        secondCatHl2 = document.querySelector("#home-approach #second-cat-hl2");
        scImg1 = document.querySelector("#home-approach #sc-img-0");
        scImg2 = document.querySelector("#home-approach #sc-img-1");
        scImg3 = document.querySelector("#home-approach #sc-img-2");
        secondCatImgs = document.querySelectorAll(
            "#home-approach .second-cat-inner-img",
        );

        wordHls = document.querySelectorAll("#home-approach .word-hl");
    };

    const firstCatEnter = () => {
        gsap.timeline()
            .to(fcImg1, {
                duration: 1,
                ease: "elastic.out(1,0.7)",
                scale: 1.5,
                xPercent: -240,
                yPercent: -70,
                overwrite: true,
            })
            .to(
                fcImg2,
                {
                    duration: 1,
                    ease: "elastic.out(1,0.5)",
                    scale: 1.5,
                    xPercent: -30,
                    yPercent: -140,
                    overwrite: true,
                },
                "<",
            )
            .to(
                fcImg3,
                {
                    duration: 1,
                    ease: "elastic.out(1,0.5)",
                    scale: 1.5,
                    xPercent: 160,
                    yPercent: -95,
                    overwrite: true,
                },
                "<",
            )
            .to(
                firstCatP1,
                {
                    duration: 0.8,
                    "--underline": 1,
                    ease: "elastic.out(1,1)",
                    x: "1em",
                    overwrite: true,
                },
                "<",
            )
            .to(
                firstCatP2,
                {
                    duration: 0.8,
                    "--underline": 1,
                    ease: "elastic.out(1,1)",
                    x: "-1em",
                    overwrite: true,
                },
                "<",
            )
            .to(
                firstCatHl,
                {
                    duration: 0.5,
                    ease: "power4.out",
                    scaleX: 1,
                    overwrite: true,
                },
                "<",
            );
    };

    const firstCatLeave = () => {
        gsap.timeline()
            .to(fcImg1, {
                duration: 0.6,
                xPercent: 0,
                yPercent: 0,
                scale: 1,
                overwrite: true,
                ease: "elastic.out(0.8,1)",
            })
            .to(
                [fcImg2, fcImg3],
                {
                    duration: 0.6,
                    xPercent: 0,
                    yPercent: 0,
                    scale: 0.99,
                    overwrite: true,
                    ease: "elastic.out(0.8,1)",
                },
                "<",
            )
            .to(
                [firstCatP1, firstCatP2],
                {
                    duration: 0.6,
                    ease: "elastic.out(0.8,1)",
                    x: 0,
                    overwrite: true,
                },
                "<",
            )
            .to(
                firstCatHl,
                {
                    duration: 0.2,
                    ease: "power3.out",
                    scaleX: 0,
                    overwrite: true,
                },
                "<",
            );
    };

    const firstCatMove = (e: MouseEvent) => {
        if (!firstCat) return;

        const newMp = {
            x: e.clientX,
            y: e.clientY,
        };

        gsap.to(mp, {
            duration: 0.2,
            x: newMp.x,
            y: newMp.y,
            overwrite: true,
            onUpdate: () => {
                const velocity = {
                    x: mp.x - newMp.x,
                    y: mp.y - newMp.y,
                };

                const scale =
                    1 - gsap.utils.clamp(0, 0.1, Math.abs(velocity.x) * 0.001);

                firstCatImgs?.forEach((img, index) => {
                    gsap.set(img, {
                        x: -velocity.x * 0.2,
                        y: -velocity.y * 0.2,
                        scale,
                        overwrite: true,
                    });
                });
            },
        });
    };

    const secondCatEnter = function () {
        gsap.timeline()
            .to(scImg1, {
                duration: 1,
                ease: "elastic.out(1,0.7)",
                scale: 1.5,
                xPercent: -250,
                yPercent: -110,
                overwrite: true,
            })
            .to(
                scImg2,
                {
                    duration: 1,
                    ease: "elastic.out(1,0.5)",
                    scale: 1.5,
                    xPercent: -70,
                    yPercent: -155,
                    overwrite: true,
                },
                "<",
            )
            .to(
                scImg3,
                {
                    duration: 1,
                    ease: "elastic.out(1,0.5)",
                    scale: 1.5,
                    xPercent: 120,
                    yPercent: -85,
                    overwrite: true,
                },
                "<",
            )

            .to(
                secondCatP1,
                {
                    duration: 0.8,
                    ease: "elastic.out(1,1)",
                    "--underline": 1,
                    x: "1em",
                    overwrite: true,
                },
                "<",
            )
            .to(
                [secondCatHl1, secondCatHl2],
                {
                    duration: 0.5,
                    ease: "power4.out",
                    scaleX: 1,
                    overwrite: true,
                },
                "<",
            )
            .to(
                secondCat,
                {
                    duration: 0.15,
                    color: "#F8F7EC",
                    overwrite: true,
                    delay: 0.1,
                },
                "<",
            );
    };

    const secondCatLeave = () => {
        gsap.timeline()
            .to(scImg1, {
                duration: 0.6,
                xPercent: 0,
                yPercent: 0,
                scale: 1,
                overwrite: true,
                ease: "elastic.out(0.8,1)",
            })
            .to(
                [scImg2, scImg3],
                {
                    duration: 0.6,
                    xPercent: 0,
                    yPercent: 0,
                    scale: 0.99,
                    overwrite: true,
                    ease: "elastic.out(0.8,1)",
                },
                "<",
            )
            .to(
                secondCat,
                {
                    duration: 0.3,
                    ease: "power4.out",
                    color: "#181817",
                    overwrite: true,
                },
                "<",
            )
            .to(
                secondCatP1,
                {
                    duration: 0.6,
                    ease: "elastic.out(0.8,1)",
                    x: 0,
                    overwrite: true,
                },
                "<",
            )
            .to(
                [secondCatHl2, secondCatHl1],
                {
                    duration: 0.2,
                    stagger: 0.1,
                    ease: "power3.out",
                    scaleX: 0,
                    overwrite: true,
                },
                "<",
            );
    };

    const secondCatMove = (e: MouseEvent) => {
        if (!secondCat) return;

        const newMp = {
            x: e.clientX,
            y: e.clientY,
        };

        gsap.to(mp, {
            duration: 0.2,
            x: newMp.x,
            y: newMp.y,
            overwrite: true,
            onUpdate: () => {
                const velocity = {
                    x: mp.x - newMp.x,
                    y: mp.y - newMp.y,
                };

                const scale =
                    1 - gsap.utils.clamp(0, 0.1, Math.abs(velocity.x) * 0.001);

                secondCatImgs?.forEach((img, index) => {
                    gsap.set(img, {
                        x: -velocity.x * 0.2,
                        y: -velocity.y * 0.2,
                        scale,
                        overwrite: true,
                    });
                });
            },
        });
    };

    const init = () => {
        const container = document.querySelector("#home-approach");
        if (!container) return;

        setVariables();

        tlAppear = gsap
            .timeline({
                default: {
                    duration: 0.4,
                    ease: "power4.out",
                },
                scrollTrigger: {
                    trigger: container,
                    start: "top 50%",
                    end: "bottom top",
                },
            })
            .from(
                "#home-approach .word",
                {
                    duration: 0.6,
                    opacity: 0,
                    x: -20,
                    stagger: 0.03,
                },
                "start",
            )

            .from(
                firstCatP1,
                {
                    x: "1em",
                },
                "start+=0.4",
            )
            .from(
                firstCatP2,
                {
                    x: "-1em",
                },
                "start+=0.4",
            )
            .from(
                secondCatP1,
                {
                    x: "1em",
                },
                "start+=0.4",
            )
            .from(
                "#home-approach .bubbles",
                {
                    scale: 0,
                    stagger: 0.05,
                },
                "start+=0.4",
            )
            .to(
                [firstCatP1, firstCatP2, secondCatP1, secondCatP2],
                {
                    "--underline": 1,
                    duration: 0.4,
                    stagger: 0.1,
                },
                "start+=0.6",
            )
            .from(
                "#approach-link",
                {
                    opacity: 0,
                    x: -50,
                },
                "start+=0.6",
            );

        if (window.innerWidth < 1024) {
            tlAppear.from(
                wordHls,
                {
                    scaleX: 0,
                    duration: 0.4,
                    stagger: 0.1,
                },
                "start+=0.6",
            );
        }

        mm = gsap.matchMedia();

        mm.add("(width > 1024px )", () => {
            firstCat?.addEventListener("mouseenter", firstCatEnter);
            firstCat?.addEventListener("mouseleave", firstCatLeave);
            firstCat?.addEventListener("mousemove", firstCatMove);
            secondCat?.addEventListener("mouseenter", secondCatEnter);
            secondCat?.addEventListener("mouseleave", secondCatLeave);
            secondCat?.addEventListener("mousemove", secondCatMove);
            return () => {
                firstCat?.removeEventListener("mouseenter", firstCatEnter);
                firstCat?.removeEventListener("mouseleave", firstCatLeave);
                firstCat?.removeEventListener("mousemove", firstCatMove);
                secondCat?.removeEventListener("mouseenter", secondCatEnter);
                secondCat?.removeEventListener("mouseleave", secondCatLeave);
                secondCat?.removeEventListener("mousemove", secondCatMove);
            };
        });
    };

    const cleanup = () => {
        tlAppear?.kill();
        mm?.revert();
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:page-load", () => {
        init();
    });
    document.addEventListener("astro:before-swap", cleanup);
</script>
