---
import { Icon } from "astro-icon/components";

interface SubjectOption {
    id: string;
    label: string;
}

interface FormBlok {
    first_name_label: string;
    last_name_label: string;
    email_label: string;
    subject_label: string;
    message_label: string;
    subject_options: SubjectOption[];
    send_label: string;
    required_fields_label: string;
    success_message: string;
    new_message_label: string;
    error_message: string;
}

const { blok } = Astro.props as { blok: FormBlok };
---

<div class="mt-50 md:mt-60">
    <div
        id="form-container"
        class="before:bg-pink md:before:left-gutter md:before:right-gutter relative py-75 text-black before:absolute before:inset-0 md:py-100"
    >
        <div class="relative px-24 md:mx-auto md:w-8/10 md:px-0 lg:w-6/8">
            <!-- Form success -->
            <div id="form-success" class="px-gutter hidden flex-col gap-24">
                <h2 class="text-title-5 whitespace-pre-wrap"
                    >{blok.success_message}</h2
                >
                <div>
                    <button
                        id="new-button"
                        type="button"
                        class="text-cta-16 relative mt-16 inline-flex cursor-pointer after:absolute after:inset-x-0 after:bottom-0 after:h-1 after:bg-current"
                    >
                        {blok.new_message_label}
                    </button>
                </div>
            </div>
            <form
                name="contact"
                method="POST"
                netlify-honeypot="bot-field"
                data-netlify="true"
                class="flex flex-col gap-40 md:gap-48"
                id="contact-form"
                action="/"
            >
                <input type="hidden" name="form-name" value="contact" />
                <p class="hidden">
                    <label>
                        <input name="bot-field" />
                    </label>
                </p>

                <!-- Name -->
                <div class="flex flex-col gap-40 md:flex-row md:gap-0">
                    <div class="px-gutter flex flex-1 flex-col md:gap-8">
                        <label for="lastname" class="text-title-7"
                            >{blok.first_name_label}*</label
                        >
                        <div
                            class="relative before:pointer-events-none before:absolute before:inset-0 before:border-b before:border-black"
                        >
                            <input
                                type="text"
                                id="lastname"
                                name="lastname"
                                required
                                class="text-p-24 w-full border-b-3 border-transparent bg-transparent py-6 outline-none focus:border-black focus-visible:border-black focus-visible:outline-0 md:py-8"
                            />
                        </div>
                    </div>
                    <div class="px-gutter flex flex-1 flex-col md:gap-8">
                        <label for="firstname" class="text-title-7"
                            >{blok.last_name_label}*</label
                        >
                        <div
                            class="relative before:pointer-events-none before:absolute before:inset-0 before:border-b before:border-black"
                        >
                            <input
                                type="text"
                                id="firstname"
                                name="firstname"
                                required
                                class="text-p-24 w-full border-b-3 border-transparent bg-transparent py-6 outline-none focus:border-black focus-visible:border-black focus-visible:outline-0 md:py-8"
                            />
                        </div>
                    </div>
                </div>

                <!-- Email -->
                <div class="px-gutter flex flex-col md:gap-8">
                    <label for="email" class="text-title-7"
                        >{blok.email_label}*</label
                    >
                    <div
                        class="relative before:pointer-events-none before:absolute before:inset-0 before:border-b before:border-black"
                    >
                        <input
                            type="email"
                            id="email"
                            name="email"
                            required
                            class="text-p-24 w-full border-b-3 border-transparent bg-transparent py-6 outline-none focus:border-black focus-visible:border-black focus-visible:outline-0 md:py-8"
                        />
                    </div>
                </div>

                <!-- Subject -->
                <div class="px-gutter flex flex-col md:gap-8">
                    <p class="text-title-7">{blok.subject_label}*</p>
                    <div class="flex flex-wrap gap-4">
                        {
                            (blok.subject_options || []).map(
                                (option: SubjectOption, index: number) => (
                                    <div class="subject-option">
                                        <input
                                            type="radio"
                                            id={option.id}
                                            name="subject"
                                            value={option.label}
                                            class="topic-radio peer hidden"
                                            required={index === 0}
                                        />
                                        <label
                                            for={option.id}
                                            class="topic-label text-tag-lil peer-checked:bg-blue inline-flex cursor-pointer items-center gap-6 rounded-[6rem] border-3 border-black px-10 py-1 transition-all md:gap-10 md:px-13 md:py-5"
                                        >
                                            <span class="arrow-icon relative -top-1">
                                                <Icon
                                                    name="arrow-right"
                                                    class="size-12 md:size-16"
                                                />
                                            </span>
                                            <span>{option.label}</span>
                                        </label>
                                    </div>
                                ),
                            )
                        }
                    </div>
                </div>

                <!-- Message -->
                <div class="px-gutter flex flex-col md:gap-8">
                    <label for="message" class="text-title-7"
                        >{blok.message_label}*</label
                    >
                    <div
                        class="relative before:pointer-events-none before:absolute before:inset-0 before:border before:border-black"
                    >
                        <textarea
                            data-lenis-prevent
                            id="message"
                            name="message"
                            rows="3"
                            required
                            class="text-p-24 relative block w-full resize-none border border-3 border-transparent bg-transparent p-8 focus:border-black focus-visible:border-black focus-visible:outline-0 md:py-13"
                        ></textarea>
                    </div>
                </div>

                <!-- Form error -->
                <div id="form-error" class="px-gutter text-orange hidden">
                    <p class="text-p-12 whitespace-pre-wrap"
                        >{blok.error_message}</p
                    >
                </div>

                <!-- Submit -->
                <div
                    class="px-gutter mt-40 flex items-end justify-between gap-24 md:mt-24"
                >
                    <button
                        type="submit"
                        id="submit-button"
                        class="text-cta-32 inline-flex flex-none cursor-pointer items-end gap-11 hover:opacity-80"
                    >
                        <span
                            class="relative whitespace-pre-wrap after:absolute after:inset-x-0 after:bottom-0 after:h-2 after:bg-current"
                            >{blok.send_label}</span
                        >
                        <span
                            class="flex size-28 items-center justify-center rounded-full border-2 border-current md:size-34"
                        >
                            <Icon
                                name="arrow-right"
                                class="size-14 md:size-16"
                            />
                        </span>
                    </button>
                    <span>{blok.required_fields_label}</span>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .topic-label .arrow-icon {
        display: none;
    }
    .topic-radio:checked + .topic-label .arrow-icon {
        display: inline-flex;
    }
</style>

<script>
    let formContainer: HTMLElement | null = null;
    let form: HTMLFormElement | null = null;
    let successMessage: HTMLElement | null = null;
    let errorMessage: HTMLElement | null = null;
    let submitButton: HTMLButtonElement | null = null;
    let newButton: HTMLElement | null = null;

    let handleSubmit: ((e: SubmitEvent) => Promise<void>) | null = null;
    let handleNewButton: (() => void) | null = null;

    const init = () => {
        formContainer = document.getElementById("form-container");
        form = document.getElementById("contact-form") as HTMLFormElement;
        successMessage = document.getElementById("form-success");
        errorMessage = document.getElementById("form-error");
        submitButton = document.getElementById(
            "submit-button",
        ) as HTMLButtonElement;
        newButton = document.getElementById("new-button");

        if (form && successMessage && errorMessage) {
            handleSubmit = async (e) => {
                e.preventDefault();

                if (submitButton) {
                    submitButton.disabled = true;
                }

                try {
                    const formData = new FormData(form);

                    const response = await fetch("/", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded",
                        },
                        body: new URLSearchParams(formData as any).toString(),
                    });

                    if (response.ok) {
                        form.classList.add("hidden");
                        successMessage.classList.remove("hidden");
                        successMessage.classList.add("flex");

                        formContainer.scrollIntoView({
                            behavior: "smooth",
                            block: "start",
                        });

                        form.reset();
                    } else {
                        throw new Error("Error during submission");
                    }
                } catch (error) {
                    form.classList.add("hidden");
                    errorMessage.classList.remove("hidden");
                    errorMessage.classList.add("flex");

                    console.error("Submission error:", error);
                }
            };

            form.addEventListener("submit", handleSubmit);

            if (newButton) {
                handleNewButton = () => {
                    successMessage.classList.add("hidden");
                    successMessage.classList.remove("flex");
                    errorMessage.classList.add("hidden");
                    errorMessage.classList.remove("flex");
                    form.classList.remove("hidden");

                    if (submitButton) {
                        submitButton.disabled = false;
                    }
                };

                newButton.addEventListener("click", handleNewButton);
            }
        }
    };

    const cleanup = () => {
        if (form && handleSubmit) {
            form.removeEventListener("submit", handleSubmit);
        }

        if (newButton && handleNewButton) {
            newButton.removeEventListener("click", handleNewButton);
        }

        formContainer = null;
        form = null;
        successMessage = null;
        errorMessage = null;
        submitButton = null;
        newButton = null;
        handleSubmit = null;
        handleNewButton = null;
    };

    document.addEventListener("astro:page-load", () => {
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
