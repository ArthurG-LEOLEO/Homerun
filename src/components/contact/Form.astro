---
import { Icon } from "astro-icon/components";

interface SubjectOption {
  id: string;
  label: string;
}

interface FormBlok {
  first_name_label: string;
  last_name_label: string;
  email_label: string;
  subject_label: string;
  message_label: string;
  subject_options: SubjectOption[];
  required_fields_label: string;
  success_message: string;
  new_message_label: string;
  error_message: string;
}

const { blok } = Astro.props as { blok: FormBlok };
---

<div class="mt-50 md:mt-60">
    <div class="relative py-75 before:bg-pink before:absolute before:inset-0 text-black md:py-100 md:before:left-gutter md:before:right-gutter">
        <div class="relative px-24 md:px-0 md:mx-auto md:w-8/10 lg:w-6/8">

            <!-- Form success -->
            <div id="form-success" class="hidden flex-col gap-24">
                <h2 class="whitespace-pre-wrap text-title-5">{blok.success_message}</h2>
                <button id="new-button" type="button" class="relative inline-flex mt-16 after:absolute after:inset-x-0 after:bottom-0 after:h-1 after:bg-current text-cta-16 cursor-pointer">
                    {blok.new_message_label}
                </button>
            </div>
            <form
                name="contact"
                method="POST"
                netlify-honeypot="bot-field"
                data-netlify="true"
                class="flex flex-col gap-40 md:gap-48"
                id="contact-form"
                action="/"
            >
                <input type="hidden" name="form-name" value="contact" />
                <p class="hidden">
                    <label>
                        <input name="bot-field" />
                    </label>
                </p>

                <!-- Name -->
                <div class="flex flex-col gap-40 md:flex-row md:gap-0">
                    <div class="flex flex-col flex-1 px-gutter md:gap-8">
                        <label for="lastname" class="text-title-7">{blok.first_name_label}*</label>
                        <div class="relative before:absolute before:inset-0 before:border-b before:border-black before:pointer-events-none">
                            <input
                                type="text"
                                id="lastname"
                                name="lastname"
                                required
                                class="text-p-24 py-6 bg-transparent md:py-8 w-full outline-none border-b-3 border-transparent focus-visible:border-black focus-visible:outline-0 focus:border-black"
                            />
                        </div>
                    </div>
                    <div class="flex flex-col flex-1 px-gutter md:gap-8">
                        <label for="firstname" class="text-title-7">{blok.last_name_label}*</label>
                        <div class="relative before:absolute before:inset-0 before:border-b before:border-black before:pointer-events-none">
                            <input
                                type="text"
                                id="firstname"
                                name="firstname"
                                required
                                class="text-p-24 py-6 bg-transparent md:py-8 w-full outline-none border-b-3 border-transparent focus-visible:border-black focus-visible:outline-0 focus:border-black"
                            />
                        </div>
                    </div>
                </div>

                <!-- Email -->
                <div class="flex flex-col px-gutter md:gap-8">
                    <label for="email" class="text-title-7">{blok.email_label}*</label>
                    <div class="relative before:absolute before:inset-0 before:border-b before:border-black before:pointer-events-none">
                        <input
                            type="email"
                            id="email"
                            name="email"
                            required
                            class="text-p-24 py-6 bg-transparent md:py-8 w-full outline-none border-b-3 border-transparent focus-visible:border-black focus-visible:outline-0 focus:border-black"
                        />
                    </div>
                </div>

                <!-- Subject -->
                <div class="flex flex-col px-gutter md:gap-8">
                    <p class="text-title-7">{blok.subject_label}*</p>
                    <div class="flex flex-wrap gap-4">
                        {(blok.subject_options || []).map((option: SubjectOption, index: number) => (
                            <div class="subject-option">
                                <input
                                    type="radio"
                                    id={option.id}
                                    name="subject"
                                    value={option.label}
                                    class="topic-radio peer hidden"
                                    required={index === 0}
                                />
                                <label
                                    for={option.id}
                                    class="topic-label inline-flex items-center gap-6 text-tag-lil px-10 py-1 border-3 border-black rounded-[6rem] cursor-pointer inline-block transition-all md:gap-10 md:px-13 md:py-5 peer-checked:bg-blue"
                                >
                                    <span class="arrow-icon relative -top-1">
                                        <Icon 
                                            name="arrow-right" 
                                            class="size-12 md:size-16" 
                                        />
                                    </span>
                                    <span>
                                        {option.label}
                                    </span>
                                </label>
                            </div>
                        ))}
                    </div>
                </div>

                <!-- Message -->
                <div class="flex flex-col px-gutter md:gap-8">
                    <label for="message" class="text-title-7">{blok.message_label}*</label>
                        <div class="relative before:absolute before:inset-0 before:border before:border-black before:pointer-events-none">
                            <textarea
                                id="message"
                                name="message"
                                rows="3"
                                required
                                class="relative block w-full text-p-24 border border-3 border-transparent p-8 bg-transparent md:py-13 resize-none focus-visible:outline-0 focus-visible:border-black focus:border-black"
                            ></textarea>
                    </div>
                </div>

                <!-- Form error -->
                <div id="form-error" class="hidden px-gutter text-orange">
                    <p class="whitespace-pre-wrap text-p-12">{blok.error_message}</p>
                </div>

                <!-- Submit -->
                <div class="flex items-end gap-24 justify-between mt-40 px-gutter md:mt-24">
                    <button
                        type="submit"
                        id="submit-button"
                        class='flex-none text-cta-32 inline-flex items-end gap-11 cursor-pointer hover:opacity-80'
                    >
                        <span class="relative whitespace-pre-wrap after:absolute after:inset-x-0 after:bottom-0 after:h-2 after:bg-current"
                        >Envoyer</span>
                        <span class="flex size-28 items-center justify-center rounded-full border-2 border-current md:size-34">
                            <Icon
                                name="arrow-right"
                                class="size-14 md:size-16"
                            />
                        </span>
                    </button>
                    <span>{blok.required_fields_label}</span>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .topic-label .arrow-icon {
        display: none;
    }
    .topic-radio:checked + .topic-label .arrow-icon {
        display: inline-flex;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('contact-form') as HTMLFormElement;
        const successMessage = document.getElementById('form-success') as HTMLDivElement;
        const errorMessage = document.getElementById('form-error') as HTMLDivElement;
        const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
        const newButton = document.getElementById('new-button');

        if (form && successMessage && errorMessage) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                // Désactiver le bouton pendant la soumission
                if (submitButton) {
                    submitButton.disabled = true;
                    submitButton.classList.add('opacity-50');
                }
                
                try {
                    const formData = new FormData(form);
                    
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: new URLSearchParams(formData as any).toString()
                    });
                    
                    if (response.ok) {
                        // Montrer le message de succès
                        form.classList.add('hidden');
                        successMessage.classList.remove('hidden');
                        successMessage.classList.add('flex');
                        
                        // Scroll vers le haut du message
                        successMessage.scrollIntoView({ behavior: 'smooth' });
                        
                        // Réinitialiser le formulaire (pour une utilisation future)
                        form.reset();
                    } else {
                        throw new Error('Error during submission');
                    }
                } catch (error) {
                    // Afficher le message d'erreur
                    form.classList.add('hidden');
                    errorMessage.classList.remove('hidden');
                    errorMessage.classList.add('flex');
                    
                    console.error('Submission error:', error);
                }
            });
            
            if (newButton) {
                newButton.addEventListener('click', () => {
                    successMessage.classList.add('hidden');
                    successMessage.classList.remove('flex');
                    form.classList.remove('hidden');
                    
                    if (submitButton) {
                        submitButton.disabled = false;
                        submitButton.classList.remove('opacity-50');
                    }
                });
            }
        }
    });
</script>
