---
import { Icon } from "astro-icon/components";

import Tag from "../../components/atoms/Tag.astro";
import LayeredImage from "../../components/global/LayeredImage.astro";

const { language, caseItem } = Astro.props;
const hasVideo = caseItem.has_case_study && caseItem.cover_video;
const videoId = `case-video-${Math.random().toString(36).substring(2, 11)}`;
---

<div
    class={`relative ${
        caseItem.cover_ratio === "square"
            ? "aspect-square"
            : "aspect-[1398/883]"
    }`}
    data-has-video={hasVideo ? "true" : "false"}
>
    <LayeredImage
        imgClass="object-cover"
        class="size-full"
        image={caseItem.cover}
    />
    {hasVideo && (
        <div class="video-overlay absolute opacity-0 inset-0 transition-opacity duration-300">
            <video
                id={videoId}
                class="w-full h-full object-cover" 
                data-video-src={caseItem.cover_video.filename} 
                muted 
                playsinline
                loop
                preload="metadata"
                data-video-id={videoId}>
            </video>
        </div>
    )}
    {
        caseItem.united && (
            <Icon
                name="united"
                class="absolute right-16 bottom-16 size-37 text-white md:right-24 md:bottom-24 md:size-55"
            />
        )
    }
    <Tag category={caseItem.category} class="absolute top-16 left-16" />
</div>

<script>
    let videos: NodeListOf<HTMLVideoElement> | null;
    let videoOverlays: NodeListOf<Element> | null;
    
    const init = () => {
        const hasHoverCapability = window.matchMedia('(hover: hover)').matches;
        
        if (hasHoverCapability) {
            videos = document.querySelectorAll('video[data-video-src]:not([src])');
            videos.forEach((videoElement) => {
                const video = videoElement as HTMLVideoElement;
                const videoSrc = video.getAttribute('data-video-src');
                if (videoSrc) {
                    video.src = videoSrc;
                    video.load();
                }
            });
        } else {
            videoOverlays = document.querySelectorAll('.video-overlay');
            videoOverlays.forEach((overlay) => {
                overlay.remove();
            });
        }
    };

    const cleanup = () => {
        videos = null;
        videoOverlays = null;
    };

    document.addEventListener("astro:page-load", () => {
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
