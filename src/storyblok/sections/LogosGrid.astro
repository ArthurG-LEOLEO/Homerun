---
import SBImage from "../../components/global/SBImage.astro";

interface Logo {
    filename: string;
    alt?: string;
    id: number;
}

interface Props {
    logos: {
        animation_interval: number;
        logos: Logo[];
    };
    className?: string;
}

const { logos, className = "" } = Astro.props;
const logosArray = logos.logos || [];
const animationInterval = logos.animation_interval || 3000;

const MAX_LOGOS_MOBILE = 9;
const MAX_LOGOS_TABLET = 12;
const MAX_LOGOS_DESKTOP = 24;
---

<div class={`px-gutter mx-auto sm:w-10/12 lg:w-8/12 ${className}`}>
    <div
        class="grid-logos-wrapper"
        data-logos={JSON.stringify(logosArray)}
        data-interval={animationInterval}
    >
        <div class="grid grid-cols-3 gap-1 md:grid-cols-4 xl:grid-cols-6">
            {
                logosArray
                    .slice(0, Math.min(logosArray.length, MAX_LOGOS_DESKTOP))
                    .map((logo, index) => {
                        let visibilityClass = "";

                        if (
                            index >= MAX_LOGOS_MOBILE &&
                            index < MAX_LOGOS_TABLET
                        ) {
                            visibilityClass = "hidden md:block";
                        } else if (index >= MAX_LOGOS_TABLET) {
                            visibilityClass = "hidden xl:block";
                        }

                        return (
                            <div
                                class={`relative aspect-square outline-1 outline-current ${visibilityClass}`}
                            >
                                <div class="logo-container absolute inset-0 p-30 xl:p-20">
                                    <div class="relative flex h-full w-full items-center justify-center">
                                        <SBImage
                                            image={logo}
                                            class="h-auto max-h-full w-auto max-w-full object-contain"
                                        />
                                    </div>
                                </div>
                            </div>
                        );
                    })
            }
        </div>
    </div>
</div>

<script>
    import { gsap } from "gsap";

    const MAX_LOGOS_MOBILE = 9;
    const MAX_LOGOS_TABLET = 12;
    const MAX_LOGOS_DESKTOP = 24;

    let currentLogos: number[] = [];
    let remainingLogos: number[] = [];
    let isAnimating = false;
    let intervalId: ReturnType<typeof setInterval> | null = null;
    let previousBreakpoint: string;

    const getBreakpoint = () => {
        if (window.matchMedia("(min-width: 1280px)").matches) {
            return "desktop";
        } else if (window.matchMedia("(min-width: 768px)").matches) {
            return "tablet";
        } else {
            return "mobile";
        }
    };

    const getMaxLogos = (breakpoint: string): number => {
        switch (breakpoint) {
            case "desktop":
                return MAX_LOGOS_DESKTOP;
            case "tablet":
                return MAX_LOGOS_TABLET;
            case "mobile":
            default:
                return MAX_LOGOS_MOBILE;
        }
    };

    const shuffleArray = (array: any[]) => {
        const newArray = [...array];
        for (let i = newArray.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
        }
        return newArray;
    };

    const updateLogos = (allLogos: any[]) => {
        const cells = document.querySelectorAll(".logo-container > div");
        currentLogos.forEach((logoIndex, cellIndex) => {
            const img = cells[cellIndex]?.querySelector("img");
            if (img && allLogos[logoIndex]) {
                const logo = allLogos[logoIndex];
                img.src = logo.filename;
                img.alt = logo.alt || "";
            }
        });
    };

    const setupLogos = (allLogos: any[]) => {
        const totalLogos = allLogos.length;
        const breakpoint = getBreakpoint();
        const maxLogos = getMaxLogos(breakpoint);

        if (totalLogos <= maxLogos) {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
            currentLogos = Array.from({ length: totalLogos }, (_, i) => i);
            remainingLogos = [];
            updateLogos(allLogos);
            return;
        }

        const allIndices = Array.from({ length: totalLogos }, (_, i) => i);
        const shuffledIndices = shuffleArray(allIndices);

        currentLogos = shuffledIndices.slice(0, maxLogos);
        remainingLogos = shuffledIndices.slice(maxLogos);

        updateLogos(allLogos);

        if (remainingLogos.length > 0) {
            if (intervalId) {
                clearInterval(intervalId);
            }
            startLogoRotation();
        }
    };

    const init = () => {
        const gridWrapper = document.querySelector(".grid-logos-wrapper");
        if (!gridWrapper) return;

        const logosStr = gridWrapper.getAttribute("data-logos");
        if (!logosStr) return;

        try {
            const allLogos = JSON.parse(logosStr);
            previousBreakpoint = getBreakpoint();
            setupLogos(allLogos);

            const handleResize = () => {
                const currentBreakpoint = getBreakpoint();
                if (currentBreakpoint !== previousBreakpoint) {
                    previousBreakpoint = currentBreakpoint;
                    setupLogos(allLogos);
                }
            };

            window.addEventListener("resize", handleResize);

            document.addEventListener("astro:before-swap", () => {
                window.removeEventListener("resize", handleResize);
            });
        } catch (e) {
            console.error("Erreur lors du parsing des donnÃ©es logos:", e);
        }
    };

    const startLogoRotation = () => {
        const gridWrapper = document.querySelector(".grid-logos-wrapper");
        if (!gridWrapper) return;

        const interval = parseInt(
            gridWrapper.getAttribute("data-interval") || "3000",
            10,
        );

        intervalId = setInterval(animateNextLogo, interval);
    };

    const animateNextLogo = async () => {
        if (isAnimating || !remainingLogos.length) return;
        isAnimating = true;

        const gridWrapper = document.querySelector(".grid-logos-wrapper");
        if (!gridWrapper) return;

        const allLogos = JSON.parse(
            gridWrapper.getAttribute("data-logos") || "[]",
        );
        const randomCellIndex = Math.floor(Math.random() * currentLogos.length);
        const cells = document.querySelectorAll(".logo-container > div");
        const targetCell = cells[randomCellIndex];
        if (!targetCell) return;

        const oldLogoIndex = currentLogos[randomCellIndex];
        currentLogos[randomCellIndex] = remainingLogos[0];
        remainingLogos.shift();
        remainingLogos.push(oldLogoIndex);

        await gsap.to(targetCell, {
            opacity: 0,
            duration: 0.8,
            ease: "power2.in",
            transformOrigin: "center",
        });

        const img = targetCell.querySelector("img");
        if (img) {
            const newLogo = allLogos[currentLogos[randomCellIndex]];
            img.src = newLogo.filename;
            img.alt = newLogo.alt || "";
        }

        await gsap.to(targetCell, {
            opacity: 1,
            duration: 0.8,
            ease: "power2.out",
            transformOrigin: "center",
        });

        isAnimating = false;
    };

    const cleanup = () => {
        if (intervalId) clearInterval(intervalId);
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:page-load", init);
    document.addEventListener("astro:before-swap", cleanup);
</script>
