---
import SBImage from "../../components/global/SBImage.astro";

interface Logo {
    filename: string;
    alt?: string;
    id: number;
}

interface Props {
    logos: Logo[];
    className?: string;
}

const { logos = [], className = "" } = Astro.props;
const logosArrayBubbles = logos || [];

const MAX_LOGOS_BUBBLES = 5;
---

<div
    class="-ml-10 w-[calc(100%+2rem)] sm:mx-auto sm:w-full md:w-10/12 lg:w-8/12 xl:w-6/12"
>
    <div
        class={`px-gutter w-[calc(100%+4rem)] -ml-20 sm:ml-0 sm:w-11/12 md:w-9/10 lg:w-7/8 xl:w-5/6 ${className}`}
    >
        <div
            class="logos-bubbles-wrapper"
            data-logos={JSON.stringify(logosArrayBubbles)}
        >
            <div class="flex flex-wrap justify-center gap-y-10 md:gap-y-15">
                {
                    Array.from({ length: MAX_LOGOS_BUBBLES }, (_, index) => (
                        <div class="logo-bubble relative aspect-square w-1/3 scale-100 rounded-full bg-white nth-1:top-14 nth-3:top-30 nth-4:-left-[7%] nth-5:-top-14 nth-5:-left-[6.5%] md:nth-1:top-30 md:nth-3:top-40 md:nth-4:-left-[2%] md:nth-5:top-0 md:nth-5:-left-[2%]">
                            <div class="logo-bubble-container absolute inset-0 p-25 md:p-30">
                                <div class="relative flex h-full w-full items-center justify-center gap-y-10 lg:gap-y-30">
                                    <SBImage
                                        image={logosArrayBubbles[index]}
                                        class="h-auto max-h-full w-auto max-w-full object-contain"
                                    />
                                </div>
                            </div>
                        </div>
                    ))
                }
            </div>
        </div>
    </div>
</div>

<script>
    import { gsap } from "gsap";

    let currentLogosBubbles: number[] = [];
    let remainingLogosBubbles: number[] = [];
    let isAnimatingBubbles = false;
    let intervalIdBubbles: ReturnType<typeof setInterval> | null = null;
    let tlAppear: gsap.core.Timeline | null;

    const MAX_LOGOS_BUBBLES = 5;

    const shuffleArrayBubbles = (array: any[]) => {
        const newArray = [...array];
        for (let i = newArray.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
        }
        return newArray;
    };

    const updateLogosBubbles = (allLogos: any[]) => {
        const cells = document.querySelectorAll(".logo-bubble-container > div");
        currentLogosBubbles.forEach((logoIndex, cellIndex) => {
            const img = cells[cellIndex]?.querySelector("img");
            if (img && allLogos[logoIndex]) {
                const logo = allLogos[logoIndex];
                img.src = logo.filename;
                img.alt = logo.alt || "";
            }
        });
    };

    const setupLogosBubbles = (allLogos: any[]) => {
        const totalLogos = allLogos.length;

        // Si on a assez de logos pour remplir la grille, pas besoin d'animation
        if (totalLogos <= MAX_LOGOS_BUBBLES) {
            if (intervalIdBubbles) {
                clearInterval(intervalIdBubbles);
                intervalIdBubbles = null;
            }
            currentLogosBubbles = Array.from(
                { length: totalLogos },
                (_, i) => i,
            );
            remainingLogosBubbles = [];
            updateLogosBubbles(allLogos);
            return;
        }

        // Réinitialiser les logos avec un ordre aléatoire
        const allIndices = Array.from({ length: totalLogos }, (_, i) => i);
        const shuffledIndices = shuffleArrayBubbles(allIndices);

        currentLogosBubbles = shuffledIndices.slice(0, MAX_LOGOS_BUBBLES);
        remainingLogosBubbles = shuffledIndices.slice(MAX_LOGOS_BUBBLES);

        updateLogosBubbles(allLogos);

        // Démarrer l'animation seulement si on a des logos en attente
        if (remainingLogosBubbles.length > 0) {
            if (intervalIdBubbles) {
                clearInterval(intervalIdBubbles);
            }
            startLogoRotationBubbles();
        }
    };

    const initBubbles = () => {
        const bubblesWrapper = document.querySelector(".logos-bubbles-wrapper");
        if (!bubblesWrapper) return;

        const logosStr = bubblesWrapper.getAttribute("data-logos");
        if (!logosStr) return;

        const logoBubbles = bubblesWrapper.querySelectorAll(".logo-bubble");
        console.log(logoBubbles);

        tlAppear = gsap
            .timeline({
                scrollTrigger: {
                    trigger: bubblesWrapper,
                    start: "top 80%",
                },
            })
            .from(logoBubbles, {
                duration: 1,
                stagger: 0.1,
                scale: 0,
                ease: "elastic.out(1.2,0.7)",
            });

        try {
            const allLogos = JSON.parse(logosStr);
            setupLogosBubbles(allLogos);
        } catch (e) {
            console.error("Erreur lors du parsing des données logos:", e);
        }
    };

    const startLogoRotationBubbles = () => {
        intervalIdBubbles = setInterval(animateNextLogoBubbles, 3000);
    };

    const animateNextLogoBubbles = async () => {
        if (isAnimatingBubbles || !remainingLogosBubbles.length) return;
        isAnimatingBubbles = true;

        const bubblesWrapper = document.querySelector(".logos-bubbles-wrapper");
        if (!bubblesWrapper) return;

        const allLogos = JSON.parse(
            bubblesWrapper.getAttribute("data-logos") || "[]",
        );
        const randomCellIndex = Math.floor(
            Math.random() * currentLogosBubbles.length,
        );
        const cells = document.querySelectorAll(".logo-bubble-container > div");
        const targetCell = cells[randomCellIndex];
        if (!targetCell) return;

        const oldLogoIndex = currentLogosBubbles[randomCellIndex];
        currentLogosBubbles[randomCellIndex] = remainingLogosBubbles[0];
        remainingLogosBubbles.shift();
        remainingLogosBubbles.push(oldLogoIndex);

        await gsap.to(targetCell, {
            opacity: 0,
            duration: 0.8,
            ease: "power2.in",
            transformOrigin: "center",
        });

        const img = targetCell.querySelector("img");
        if (img) {
            const newLogo = allLogos[currentLogosBubbles[randomCellIndex]];
            img.src = newLogo.filename;
            img.alt = newLogo.alt || "";
        }

        await gsap.to(targetCell, {
            opacity: 1,
            duration: 0.8,
            ease: "power2.out",
            transformOrigin: "center",
        });

        isAnimatingBubbles = false;
    };

    const cleanup = () => {
        tlAppear?.kill();
        if (intervalIdBubbles) clearInterval(intervalIdBubbles);
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        initBubbles();
    });

    // Event listeners
    document.addEventListener("astro:page-load", initBubbles);
    document.addEventListener("astro:before-swap", cleanup);
</script>
