---
const { language, blok } = Astro.props;

import type { SbBlokData } from "@storyblok/astro";
import SocialPost from "../../components/atoms/SocialPost.astro";
import CTA from "../../components/global/CTA.astro";
---

<div
    class="feed-slider-container bg-black pt-90 pb-90 text-white md:pt-170 md:pb-130"
    style="--underline: 0;"
>
    <div class="container-main">
        <div
            class="after:left-gutter after:right-gutter relative mb-70 flex items-center justify-between gap-50 pb-8 after:absolute after:bottom-0 after:h-1 after:origin-left after:scale-x-[var(--underline)] after:bg-[#656565]"
        >
            <div
                class="flex w-full items-center justify-between gap-6 md:w-auto"
            >
                <h2 class="text-title-1 px-gutter el">{blok.title}</h2>
                <div class="px-gutter el flex flex-col">
                    {
                        blok.subtitle && (
                            <span class="text-[#666]">{blok.subtitle}</span>
                        )
                    }
                    {blok.social_handle && <span>{blok.social_handle}</span>}
                </div>
            </div>
            <div class="px-gutter hidden items-center gap-8 md:flex">
                {
                    blok.twitter && (
                        <CTA
                            link={blok.twitter}
                            label="Twitter"
                            icon="twitter"
                            className="bg-blue text-white el"
                        />
                    )
                }
                {
                    blok.facebook && (
                        <CTA
                            link={blok.facebook}
                            label="Facebook"
                            icon="facebook"
                            className="bg-blue text-white el"
                        />
                    )
                }
                {
                    blok.linkedin && (
                        <CTA
                            link={blok.linkedin}
                            label="LinkedIn"
                            icon="linkedin"
                            className="bg-green text-white el"
                        />
                    )
                }
                {
                    blok.instagram && (
                        <CTA
                            link={blok.instagram}
                            label="Instagram"
                            icon="instagram"
                            className="bg-blue text-black el"
                        />
                    )
                }
            </div>
        </div>
    </div>
    <div
        class="feed-slider-wrapper flex w-max cursor-grab items-start gap-24 pr-24"
    >
        {
            blok.posts?.map((post: SbBlokData) => {
                return <SocialPost post={post} />;
            })
        }
        {
            blok.posts?.map((post: SbBlokData) => {
                return <SocialPost post={post} />;
            })
        }
    </div>
    <div class="px-gutter mt-40 flex items-center gap-8 md:hidden">
        {
            blok.twitter && (
                <CTA
                    link={blok.twitter}
                    icon="twitter"
                    className="bg-blue text-white el"
                />
            )
        }
        {
            blok.facebook && (
                <CTA
                    link={blok.facebook}
                    icon="facebook"
                    className="bg-blue text-white el"
                />
            )
        }
        {
            blok.linkedin && (
                <CTA
                    link={blok.linkedin}
                    icon="linkedin"
                    className="bg-green text-white el"
                />
            )
        }
        {
            blok.instagram && (
                <CTA
                    link={blok.instagram}
                    icon="instagram"
                    className="bg-blue text-black el"
                />
            )
        }
    </div>
</div>

<script>
    let wrapper: HTMLElement | null;
    let container: HTMLElement | null;
    let posts: NodeListOf<Element> | null;
    let postLinks: NodeListOf<Element> | null;
    let layers1: NodeListOf<Element> | null;
    let layers2: NodeListOf<Element> | null;

    let xTo: gsap.QuickToFunc | ((arg0: any) => void);
    let xToLayer1: gsap.QuickToFunc | ((arg0: any) => void);
    let xToLayer2: gsap.QuickToFunc | ((arg0: any) => void);
    let total = 0;
    let isHover = false;
    let gsapObserver: Observer;

    let tlAppear: gsap.core.Timeline;

    let scrollingSpeed = { x: 20 };

    const init = () => {
        container = document.querySelector(".feed-slider-container");
        wrapper = document.querySelector(".feed-slider-wrapper");
        if (!container || !wrapper) return;

        posts = document.querySelectorAll(".feed-slider-post");
        if (!posts) return;

        postLinks = document.querySelectorAll(".feed-link");
        layers1 = wrapper.querySelectorAll(".feed-post-layer-1");
        layers2 = wrapper.querySelectorAll(".feed-post-layer-2");

        const half = wrapper.clientWidth / 2;

        const wrap = gsap.utils.wrap(-half, 0);

        xTo = gsap.quickTo(wrapper, "x", {
            duration: 0.5,
            ease: "power3",
            modifiers: {
                x: gsap.utils.unitize(wrap),
            },
        });
        xToLayer1 = gsap.quickTo(layers1, "x", {
            duration: 2,
            ease: "power3",
        });
        xToLayer2 = gsap.quickTo(layers2, "x", {
            duration: 2,
            ease: "power3",
        });

        const onDragTlIn = gsap.timeline({ paused: true }).to(posts, {
            scale: 0.95,
            duration: 1,
            ease: "elastic.out(1.2, 0.7)",
        });

        const onDragTlOut = gsap.timeline({ paused: true }).to(posts, {
            scale: 1,
            duration: 1,
            ease: "elastic.out(1.2, 0.7)",
        });

        tlAppear = gsap
            .timeline({
                default: {
                    duration: 0.4,
                    ease: "power4.out",
                },
                scrollTrigger: {
                    trigger: container,
                    start: "top 50%",
                    end: "bottom top",
                },
                onComplete: () => {
                    gsap.ticker.add(tick);
                },
            })
            .from(
                ".feed-slider-container .el",
                {
                    duration: 0.4,
                    opacity: 0,
                    y: 50,
                    stagger: 0.1,
                },
                "start",
            )
            .to(
                ".feed-slider-container",
                {
                    "--underline": 1,
                    duration: 1,
                    ease: "expo.inOut",
                },
                "start+=0.3",
            )
            .to(
                scrollingSpeed,
                {
                    x: 1,
                    duration: 2,
                    ease: "expo.out",
                },
                "start+=0.4",
            )
            .from(
                ".feed-slider-wrapper",
                {
                    opacity: 0,
                    duration: 1,
                },
                "start+=0.2",
            );

        gsapObserver = Observer.create({
            target: wrapper,
            type: "pointer,touch",
            onPress: () => {
                if (Observer.isTouch) {
                    isHover = true;
                } else if (wrapper) {
                    wrapper.style.cursor = "grabbing";
                    onDragTlOut.pause();
                    onDragTlIn.restart();
                }
            },
            onDrag: (self: { deltaX: number }) => {
                if (Observer.isTouch) isHover = true;
                gsap.set(postLinks, { pointerEvents: "none" });
                const movementX = Observer.isTouch
                    ? self.deltaX * 1.5
                    : self.deltaX;
                total += movementX;
                const layerOffset = gsap.utils.clamp(
                    -100,
                    100,
                    -movementX * 1.4,
                );
                xTo(total);
                xToLayer1(layerOffset / 2);
                xToLayer2(layerOffset);
            },
            onRelease: () => {
                if (Observer.isTouch) {
                    isHover = false;
                } else if (wrapper) {
                    wrapper.style.cursor = "grab";
                    onDragTlIn.pause();
                    onDragTlOut.restart();
                }
                gsap.set(postLinks, { pointerEvents: "auto" });
                xToLayer1(0);
                xToLayer2(0);
            },
            onHover: () => (isHover = true),
            onHoverEnd: () => (isHover = false),
        });

        gsap.ticker.add(tick);

        window.addEventListener("resize", resize);
    };

    const tick = (time: any, deltaTime: number) => {
        if (isHover) return;
        total -= (deltaTime / 10) * scrollingSpeed.x;
        xTo(total);
    };

    const resize = () => {
        if (!wrapper) return;

        const half = wrapper.clientWidth / 2;
        const wrap = gsap.utils.wrap(-half, 0);

        xTo = gsap.quickTo(wrapper, "x", {
            duration: 0.5,
            ease: "power3",
            modifiers: {
                x: gsap.utils.unitize(wrap),
            },
        });
    };

    const cleanup = () => {
        if (gsapObserver) {
            gsapObserver.kill();
        }
        tlAppear?.kill();
        wrapper = null;
        posts = null;
        window.removeEventListener("resize", resize);
    };

    document.addEventListener("astro:page-load", () => {
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
