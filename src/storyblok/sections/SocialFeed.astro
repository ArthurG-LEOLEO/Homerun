---
const { language, blok } = Astro.props;

import type { SbBlokData } from "@storyblok/astro";
import SocialPost from "../../components/atoms/SocialPost.astro";
import CTA from "../../components/global/CTA.astro";
---

<div class="bg-black pt-170 pb-130 text-white">
    <div class="container-main">
        <div
            class="after:left-gutter after:right-gutter relative mb-70 flex items-center justify-between gap-50 pb-8 after:absolute after:bottom-0 after:h-1 after:bg-[#656565]"
        >
            <div class="flex items-center gap-6">
                <h2 class="text-title-1 px-gutter">{blok.title}</h2>
                <div class="px-gutter flex flex-col">
                    {
                        blok.subtitle && (
                            <span class="text-[#666]">{blok.subtitle}</span>
                        )
                    }
                    {blok.social_handle && <span>{blok.social_handle}</span>}
                </div>
            </div>
            <div class="px-gutter flex items-center gap-8">
                {
                    blok.twitter && (
                        <CTA
                            link={blok.twitter}
                            label="Twitter"
                            icon="twitter"
                            className="bg-blue text-white"
                        />
                    )
                }
                {
                    blok.facebook && (
                        <CTA
                            link={blok.facebook}
                            label="Facebook"
                            icon="facebook"
                            className="bg-blue text-white"
                        />
                    )
                }
                {
                    blok.linkedin && (
                        <CTA
                            link={blok.linkedin}
                            label="LinkedIn"
                            icon="linkedin"
                            className="bg-green text-white"
                        />
                    )
                }
                {
                    blok.instagram && (
                        <CTA
                            link={blok.instagram}
                            label="Instagram"
                            icon="instagram"
                            className="bg-blue text-black"
                        />
                    )
                }
            </div>
        </div>
    </div>
    <div class="feed-slider-wrapper flex w-max items-start gap-24 pr-24">
        {
            blok.posts?.map((post: SbBlokData) => {
                return <SocialPost post={post} />;
            })
        }
        {
            blok.posts?.map((post: SbBlokData) => {
                return <SocialPost post={post} />;
            })
        }
    </div>
</div>

<script>
    let wrapper: HTMLElement | null;
    let posts: NodeListOf<Element> | null;
    let loop: GSAPTimeline | undefined | null;

    let xTo: gsap.QuickToFunc | ((arg0: any) => void);
    let total = 0;
    let isHover = false;

    const init = () => {
        //TODO: update on resize

        wrapper = document.querySelector(".feed-slider-wrapper");
        if (!wrapper) return;

        posts = document.querySelectorAll(".feed-slider-post");
        if (!posts) return;

        const half = wrapper.clientWidth / 2;

        const wrap = gsap.utils.wrap(-half, 0);

        xTo = gsap.quickTo(wrapper, "x", {
            duration: 0.5,
            ease: "power3",
            modifiers: {
                x: gsap.utils.unitize(wrap),
            },
        });

        const onDragTlIn = gsap.timeline({ paused: true }).to(posts, {
            scale: 0.95,
            duration: 1,
            ease: "elastic.out(1.2, 0.7)",
        });

        const onDragTlOut = gsap.timeline({ paused: true }).to(posts, {
            scale: 1,
            duration: 1,
            ease: "elastic.out(1.2, 0.7)",
        });

        window.Observer.create({
            target: wrapper,
            type: "pointer,touch",
            onPress: () => {
                onDragTlOut.pause();
                onDragTlIn.restart();
            },
            onDrag: (self: { deltaX: number }) => {
                gsap.set(posts, { pointerEvents: "none" });
                total += self.deltaX;
                xTo(total);
            },
            onRelease: () => {
                onDragTlIn.pause();
                onDragTlOut.restart();
                gsap.set(posts, { pointerEvents: "auto" });
            },
            onHover: () => (isHover = true),
            onHoverEnd: () => (isHover = false),
        });

        gsap.ticker.add(tick);
    };

    const tick = (time: any, deltaTime: number) => {
        if (isHover) return;
        total -= deltaTime / 10; // Adjust the speed of automatic scrolling
        xTo(total);
    };

    const cleanup = () => {
        if (loop) {
            loop.kill();
            loop = null;
        }
        wrapper = null;
        posts = null;
    };

    document.addEventListener("astro:page-load", () => {
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
