---
import { Icon } from "astro-icon/components";
import { useTranslations } from "../../i18n/utils";
import Tag from "../../components/atoms/Tag.astro";
import Title from "../../components/atoms/Title.astro";
import LayeredImage from "../../components/global/LayeredImage.astro";
import RichText from "../../components/shop/RichText.astro";
import OtherItems from "../../components/shop/OtherItems.astro";
import CTA from "../../components/global/CTA.astro";

const { language, blok } = Astro.props;

const lang = Astro.currentLocale;
const t = useTranslations(lang);

function formatPrice(price: number | string, locale: string = "fr"): string {
    if (price === null || price === undefined) return "";

    const numPrice = typeof price === "string" ? parseFloat(price) : price;

    const formatter = new Intl.NumberFormat(
        locale === "en" ? "en-US" : "fr-FR",
        {
            style: "currency",
            currency: "EUR",
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
            useGrouping: true,
        },
    );

    let formatted = formatter.format(numPrice);

    return formatted;
}

const formattedPrice = formatPrice(blok.price, lang);
---

<div
    id="page-shop-item"
    class="shop-item bg-white text-black"
    data-unit-singular={blok.unit_label || "article"}
    data-unit-plural={blok.unit_plural_label || "articles"}
>
    <div
        class="container-main flex flex-col gap-20 pt-115 pb-120 md:flex-row-reverse md:items-start md:gap-0 md:pt-160 md:pb-170"
    >
        <div class="md:sticky md:top-55 md:w-6/12 xl:flex xl:justify-center">
            <div class="xl:w-4/6">
                <div class="px-gutter flex flex-col gap-8">
                    <div>
                        <Tag category={blok.category} />
                    </div>
                    <h1 class="text-title-1">
                        <Title title={blok.title[0]} />
                    </h1>
                    <div class="text-p-24 text-black/70">{formattedPrice}</div>
                </div>
                <div class="px-gutter mt-24">
                    <RichText content={blok.description} />
                </div>
                <div class="px-gutter mt-32 flex flex-col gap-32">
                    <!-- Select -->
                    {
                        blok.select_label &&
                            Array.isArray(blok.select_options) &&
                            blok.select_options.length > 0 && (
                                <div class="flex flex-col gap-8">
                                    <label class="text-title-7">
                                        {blok.select_label}
                                    </label>
                                    <div class="flex flex-wrap gap-4">
                                        {(blok.select_options || []).map(
                                            (option, index: number) => (
                                                <div class="subject-option">
                                                    <input
                                                        type="radio"
                                                        id={option.id}
                                                        name="subject"
                                                        value={option.label}
                                                        class="topic-radio peer hidden"
                                                        required={index === 0}
                                                    />
                                                    <label
                                                        for={option.id}
                                                        class="topic-label text-tag-lil peer-checked:bg-pink inline-flex cursor-pointer items-center gap-6 rounded-[6rem] border-3 border-black px-10 py-1 transition-all md:gap-10 md:px-13 md:py-5"
                                                    >
                                                        <span class="arrow-icon relative -top-1">
                                                            <Icon
                                                                name="arrow-right"
                                                                class="size-12 md:size-16"
                                                            />
                                                        </span>
                                                        <span>
                                                            {option.label}
                                                        </span>
                                                    </label>
                                                </div>
                                            ),
                                        )}
                                    </div>
                                </div>
                            )
                    }

                    <!-- Quantity -->
                    <div class="flex flex-col gap-8">
                        <label class="text-title-7">{t("shop.quantity")}</label>
                        <div>
                            <div
                                class="quantity-selector inline-flex min-w-10/12 items-center gap-16 border-b border-black py-13 sm:min-w-5/12 md:min-w-3/6 xl:min-w-3/4"
                            >
                                <div
                                    class="quantity-display flex flex-1 items-center gap-8"
                                >
                                    <span
                                        class="quantity-value text-p-24 tabular-nums"
                                        >1</span
                                    >
                                    <span
                                        class="quantity-unit text-p-24"
                                        data-singular={blok.unit_label ||
                                            "article"}
                                        data-plural={blok.unit_plural_label ||
                                            "articles"}
                                    >
                                        {blok.unit_label}
                                    </span>
                                </div>
                                <div class="flex flex-none items-center gap-8">
                                    <button
                                        type="button"
                                        class="quantity-btn decrease flex size-34 cursor-not-allowed items-center justify-center rounded-full border-2 opacity-50"
                                        aria-label={t("shop.quantity.down")}
                                        disabled
                                    >
                                        <Icon name="minus" class="size-16" />
                                    </button>
                                    <button
                                        type="button"
                                        class="quantity-btn increase flex size-34 cursor-pointer items-center justify-center rounded-full border-2"
                                        aria-label={t("shop.quantity.up")}
                                    >
                                        <Icon name="plus" class="size-16" />
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="px-gutter mt-32">
                    <CTA label={blok.button_label} />
                </div>
            </div>
        </div>
        <div class="px-gutter flex flex-col gap-20 md:w-6/12">
            <LayeredImage class="w-full" image={blok.cover} />
            {
                blok.other_images &&
                    blok.other_images.length > 0 &&
                    blok.other_images.map((image) => (
                        <LayeredImage class="w-full" image={image} />
                    ))
            }
        </div>
    </div>
    {blok.other_items?.length > 0 && <OtherItems items={blok.other_items} />}
</div>

<style>
    .topic-label .arrow-icon {
        display: none;
    }
    .topic-radio:checked + .topic-label .arrow-icon {
        display: inline-flex;
    }
</style>

<script>
    let tlAppear: gsap.core.Timeline;
    let page: HTMLElement | null;

    const init = () => {
        page = document.querySelector("#page-shop-item");
        if (!page) return;

        const banner = document.querySelector("#layout-banner");
        const header = document.querySelectorAll(
            "#layout-header .layout-header",
        );

        gsap.timeline()
            .set(banner, {
                y: "-100%",
            })
            .set(header, {
                y: -50,
                opacity: 0,
            });

        tlAppear = gsap
            .timeline()
            .to(
                banner,
                {
                    y: 0,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                header,
                {
                    y: 0,
                    opacity: 1,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            );

        const quantitySelector = document.querySelector(".quantity-selector");
        if (!quantitySelector) return;

        const decreaseBtn = quantitySelector.querySelector(".decrease");
        const increaseBtn = quantitySelector.querySelector(".increase");
        const quantityValue = quantitySelector.querySelector(".quantity-value");
        const quantityUnit = quantitySelector.querySelector(".quantity-unit");

        const unitSingular =
            quantityUnit?.getAttribute("data-singular") || "article";
        const unitPlural =
            quantityUnit?.getAttribute("data-plural") || "articles";

        let quantity = 1;

        const updateQuantity = (value) => {
            quantity = Math.max(1, value);
            if (quantityValue) quantityValue.textContent = quantity;

            if (decreaseBtn) {
                if (quantity <= 1) {
                    decreaseBtn.classList.remove("cursor-pointer");
                    decreaseBtn.classList.add(
                        "opacity-50",
                        "cursor-not-allowed",
                    );
                    decreaseBtn.setAttribute("disabled", "disabled");
                } else {
                    decreaseBtn.classList.remove(
                        "opacity-50",
                        "cursor-not-allowed",
                    );
                    decreaseBtn.classList.add("cursor-pointer");
                    decreaseBtn.removeAttribute("disabled");
                }
            }

            if (quantityUnit) {
                const unitText =
                    quantity > 1
                        ? quantityUnit.getAttribute("data-plural") || unitPlural
                        : quantityUnit.getAttribute("data-singular") ||
                          unitSingular;
                quantityUnit.textContent = unitText;
            }
        };

        decreaseBtn?.addEventListener("click", () =>
            updateQuantity(quantity - 1),
        );
        increaseBtn?.addEventListener("click", () =>
            updateQuantity(quantity + 1),
        );

        if (quantityUnit) {
            const singularLabel =
                quantityUnit.getAttribute("data-singular") || "article";
            const pluralLabel =
                quantityUnit.getAttribute("data-plural") || "articles";

            quantityUnit.textContent = singularLabel;
        }
    };

    const cleanup = () => {
        tlAppear?.kill();
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:page-load", () => {
        init();
    });
    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
