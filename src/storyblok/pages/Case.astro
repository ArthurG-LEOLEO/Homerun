---
import { useTranslations } from "../../i18n/utils";
import { storyblokEditable, type SbBlokData } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";

const lang = Astro.currentLocale;
const t = useTranslations(lang);

import Title from "../../components/atoms/Title.astro";
import OtherCases from "../../components/case/OtherCases.astro";
import Cover from "../../components/case/Cover.astro";
import { Icon } from "astro-icon/components";

const { language, blok } = Astro.props;
---

<div id="page-case" class="case" {...storyblokEditable(blok)}>
    <div class="pt-115 pb-120 md:pt-160 md:pb-170">
        <div class="container-main">
            <div class="px-gutter case-hero-el mb-60 opacity-0">
                <a
                    href={t("links.work")}
                    class="flex size-34 items-center justify-center rounded-full border-2"
                >
                    <Icon name="arrow-down" size="16" class="rotate-[90deg]" />
                </a>
            </div>
            <h2
                class="px-gutter text-title-6 case-hero-el text-black/70 opacity-0"
                >{blok.client}</h2
            >
            <div
                class="mt-17 flex flex-col gap-56 md:mt-24 lg:flex-row lg:items-baseline lg:justify-between lg:gap-0"
            >
                <h1 id="case-title" class="text-title-1 px-gutter lg:w-5/12">
                    <Title reveal="manual" title={blok.title[0]} />
                </h1>
                {
                    // prettier-ignore
                    blok.intro && (
                        <h3 class="case-hero-el opacity-0 px-gutter text-title-5 whitespace-pre-wrap lg:w-6/12">{blok.intro}</h3>
                    )
                }
            </div>
            <div class="px-gutter case-cover mt-40 opacity-0 lg:mt-55">
                <Cover caseItem={blok} />
            </div>

            {
                blok.strategic_challenges && blok.response && (
                    <div class="mx-auto mt-72 flex w-10/12 justify-end md:mt-130">
                        <div class="px-gutter flex flex-col gap-40 md:w-8/10 lg:w-6/10 xl:w-5/10">
                            <div class="flex flex-col gap-16">
                                <h4 class="text-title-6">
                                    {t("case.challenges")}
                                </h4>
                                {/* prettier-ignore */}
                                <p class="text-p-20 whitespace-pre-wrap text-black/70">{blok.strategic_challenges}</p>
                            </div>
                            <div class="flex flex-col gap-16">
                                <h4 class="text-title-6">
                                    {t("case.response")}
                                </h4>
                                {/* prettier-ignore */}
                                <p class="text-p-20 whitespace-pre-wrap text-black/70">{blok.response}</p>
                            </div>
                        </div>
                    </div>
                )
            }
        </div>
        <div class="mt-72 flex flex-col gap-72 md:mt-130 md:gap-130">
            {
                blok.sections?.map((blok: SbBlokData) => {
                    return (
                        <StoryblokComponent blok={blok} language={language} />
                    );
                })
            }
        </div>
    </div>
    {blok.other_cases?.length > 0 && <OtherCases cases={blok.other_cases} />}
</div>

<script>
    import { waitForFooterSplineLoad } from "../../scripts/spline";

    let tlAppear: gsap.core.Timeline;
    const init = async () => {
        const page = document.querySelector("#page-case");
        if (!page) return;

        const banner = document.querySelector("#layout-banner");
        const header: NodeListOf<HTMLElement> = document.querySelectorAll(
            "#layout-header .layout-header",
        );
        const titleWordsDesktop = page.querySelectorAll(
            "#case-title .title-wrap-desktop .word-inner",
        );
        const titleWordsMobile = page.querySelectorAll(
            "#case-title .title-wrap-mobile .word-inner",
        );
        const caseHeroEls = page.querySelectorAll(".case-hero-el");
        const caseCover = page.querySelector(".case-cover");

        gsap.timeline()
            .set(banner, {
                y: "-100%",
            })
            .set(header, {
                y: -50,
                opacity: 0,
            })
            .set([titleWordsMobile, titleWordsDesktop], {
                y: "100%",
                opacity: 1,
            })
            .set(caseHeroEls, {
                y: "3rem",
                opacity: 0,
            })
            .set(caseCover, {
                y: "3rem",
                opacity: 0,
            });

        tlAppear = gsap
            .timeline({
                paused: true,
                delay: window.innerWidth >= 1024 ? 0.3 : 0,
            })
            .to(
                banner,
                {
                    y: 0,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                header,
                {
                    y: 0,
                    opacity: 1,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                caseHeroEls,
                {
                    duration: 0.8,
                    y: 0,
                    stagger: 0.1,
                    opacity: 1,
                    ease: "elastic.out(1,0.7)",
                },
                "start+=0.1",
            )
            .to(
                caseCover,
                {
                    duration: 0.4,
                    y: 0,
                    opacity: 1,
                    ease: "power3",
                },
                "start+=0.5",
            );

        if (window.innerWidth > 1024) {
            tlAppear
                .to(
                    titleWordsDesktop,
                    {
                        duration: 0.8,
                        y: 0,
                        stagger: 0.05,
                        ease: "elastic.out(1,0.7)",
                    },
                    "start+=0.1",
                )
                .set(titleWordsMobile, {
                    y: 0,
                });
        } else {
            tlAppear
                .to(
                    titleWordsMobile,
                    {
                        duration: 0.8,
                        y: 0,
                        stagger: 0.05,
                        ease: "elastic.out(1,0.7)",
                    },
                    "start+=0.1",
                )
                .set(titleWordsDesktop, {
                    y: 0,
                });
        }

        await waitForFooterSplineLoad();

        tlAppear.play();
    };

    const cleanup = () => {
        tlAppear?.kill();
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:page-load", () => {
        init();
    });
    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
