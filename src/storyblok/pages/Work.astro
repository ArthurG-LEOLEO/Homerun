---
import { useTranslations } from "../../i18n/utils";
import Archived from "../../components/work/Archived.astro";
import Featured from "../../components/work/Featured.astro";
import Hero from "../../components/work/Hero.astro";
import FeaturedInfos from "../../components/work/FeaturedInfos.astro";

const lang = Astro.currentLocale;
const t = useTranslations(lang);

const { language, blok } = Astro.props;

const featuredCases = blok.featured_cases.filter((c) => c.content);
const archivedCases = blok.archived_cases.filter((c) => c.content);

const numberFeaturedConsulting = featuredCases.filter((c: any) => {
    return c.content.category === "consulting";
}).length;
const numberFeaturedAdvertising = featuredCases.filter(
    (c: any) => c.content.category === "advertising",
).length;
---

<div id="page-work" class="bg-black text-white">
    <Hero subtitle={blok.subtitle} />
    <FeaturedInfos
        nbConsulting={numberFeaturedConsulting}
        nbAdvertising={numberFeaturedAdvertising}
    />

    <Featured cases={featuredCases} />
    <Archived cases={archivedCases} />
</div>

<script>
    import { waitForFooterSplineLoad } from "../../scripts/spline";

    const NB_REP_ARCH_CASES = 5;
    let shownArchivedCases = 5;
    let currentCategory: string | undefined;
    let tlAppear: gsap.core.Timeline;
    let page: HTMLElement | null;
    let banner: HTMLElement | null;
    let consultingButton: HTMLElement | null;
    let advertisingButton: HTMLElement | null;
    let featuredInfos: HTMLElement | null;
    let allButton: HTMLElement | null;
    let workGrid: HTMLElement | null;
    let loadArchivedButton: HTMLElement | null;
    let featuredCases: NodeListOf<HTMLElement> | null;
    let archivedCases: NodeListOf<HTMLElement> | null;
    let featuredInfosTxt: NodeListOf<HTMLElement> | null;

    const bannerThemes = {
        consulting: {
            bg: "#EDD4F8",
            txt: "#181817",
        },
        advertising: {
            bg: "#E56138",
            txt: "#F8F7EC",
        },
        default: {
            bg: "#2D5A36",
            txt: "#F8F7EC",
        },
    } as const;

    const filter = (selectedCategory: string | undefined) => {
        currentCategory =
            selectedCategory === currentCategory ? undefined : selectedCategory;

        const prevActiveButton = page?.querySelector(
            ".work-category-btn.active",
        );

        // Hero buttons
        if (!currentCategory) {
            prevActiveButton?.classList.remove("active");
            featuredInfos?.style.setProperty("--show", "0");
            if (featuredInfos) featuredInfos.style.pointerEvents = "none";
        } else {
            const selectedButton = page?.querySelector(
                `.work-category-btn#${currentCategory}-button`,
            );
            prevActiveButton?.classList.remove("active");
            selectedButton?.classList.add("active");
            featuredInfos?.style.setProperty("--show", "1");
            if (featuredInfos) featuredInfos.style.pointerEvents = "auto";
        }

        //Featured filtering
        gsap.to(workGrid, {
            duration: 0.3,
            ease: "power3",
            y: 100,
            opacity: 0,
            onComplete: () => {
                featuredCases?.forEach((c) => {
                    const caseCat = c.dataset.category;
                    if (!currentCategory || caseCat === currentCategory) {
                        c.classList.remove("hidden");
                    } else {
                        c.classList.add("hidden");
                    }
                });
                gsap.fromTo(
                    workGrid,
                    { y: 100, opacity: 0 },
                    {
                        duration: 0.3,
                        ease: "power3",
                        y: 0,
                        opacity: 1,
                    },
                );
            },
        });

        //Archived filtering
        archivedCases?.forEach((c) => {
            const caseCat = c.dataset.category;
            if (!currentCategory) {
                c.classList.remove("hidden");
            } else if (caseCat === currentCategory) {
                c.classList.remove("hidden");
            } else {
                c.classList.add("hidden");
            }
        });

        // Featured additional infos
        if (currentCategory) {
            featuredInfosTxt?.forEach((txt) => {
                if (txt.dataset.category === currentCategory) {
                    txt.classList.remove("hidden");
                } else {
                    txt.classList.add("hidden");
                }
            });
        }

        //Banner theme
        if (banner) {
            const bannerThemeType =
                currentCategory as keyof typeof bannerThemes;
            const bannerTheme = currentCategory
                ? bannerThemes[bannerThemeType]
                : bannerThemes.default;
            banner.style.setProperty("--banner-bg", bannerTheme.bg);
            banner.style.setProperty("--banner-text", bannerTheme.txt);
        }

        // Update URL params
        const url = new URL(location.href);
        if (currentCategory) {
            url.searchParams.set("type", currentCategory);
            window.history.pushState(null, "", url.toString());
        } else {
            url.searchParams.delete("type");
            window.history.pushState(null, "", url.toString());
        }
    };

    const onFilterButtonClick = (e: MouseEvent) => {
        const target = e.target as HTMLElement | null;
        if (!target) return;

        const selectedCategory = target.dataset.category || currentCategory;

        filter(selectedCategory);
    };

    const loadMoreArchived = () => {
        if (!page || !archivedCases?.length) return;
        shownArchivedCases = shownArchivedCases + NB_REP_ARCH_CASES;
        archivedCases.forEach((ac, index) => {
            if (index + 1 <= shownArchivedCases) {
                ac.classList.remove("hidden");
            }
        });
        if (shownArchivedCases >= archivedCases.length) {
            const btnWrapper = loadArchivedButton?.parentNode as HTMLElement;
            btnWrapper.classList.add("hidden");
        }
    };

    const initLoadArchived = () => {
        if (!page || !archivedCases?.length) return;

        loadArchivedButton = page?.querySelector("#load-archived-button");
        loadArchivedButton?.addEventListener("click", loadMoreArchived);
    };

    const checkUrlFiltering = () => {
        const urlParams = new URLSearchParams(window.location.search);
        const typeOfWork = urlParams.get("type");
        if (!typeOfWork) return;
        const isAPossibleType = ["consulting", "advertising"].includes(
            typeOfWork,
        );

        if (isAPossibleType) {
            filter(typeOfWork);
        }
    };

    const initFiltering = () => {
        if (!page) return;
        consultingButton = page?.querySelector("#consulting-button");
        advertisingButton = page?.querySelector("#advertising-button");
        allButton = page?.querySelector("#all-button");
        featuredInfos = page?.querySelector("#featured-infos");
        workGrid = page?.querySelector("#work-grid");
        featuredCases = page?.querySelectorAll(".work-featured-case");
        archivedCases = page?.querySelectorAll(".work-archived-case");
        featuredInfosTxt = page?.querySelectorAll(".featured-infos-txt");
        banner = document.querySelector("#layout-banner");

        consultingButton?.addEventListener("click", onFilterButtonClick);
        advertisingButton?.addEventListener("click", onFilterButtonClick);
        allButton?.addEventListener("click", onFilterButtonClick);

        checkUrlFiltering();
    };

    const initAppear = async () => {
        if (!page) return;
        const banner = document.querySelector("#layout-banner");
        const header: NodeListOf<HTMLElement> = document.querySelectorAll(
            "#layout-header .layout-header",
        );

        const titleEls = page.querySelectorAll(".work-title-el");
        const subtitle = page.querySelectorAll(".page-subtitle");

        if (window.innerWidth < 1024) {
            gsap.timeline().set(
                [subtitle, titleEls, header, banner, workGrid],
                {
                    opacity: 1,
                    y: 0,
                },
            );
            return;
        }

        gsap.timeline()
            .set(banner, {
                y: "-100%",
            })
            .set(header, {
                y: -50,
                opacity: 0,
            })
            .set(subtitle, {
                scale: 0.7,
                opacity: 0,
            })
            .set(titleEls, {
                y: "3rem",
                opacity: 0,
            })
            .set(workGrid, {
                opacity: 0,
            });

        tlAppear = gsap
            .timeline({ paused: true, delay: 0.3 })
            .to(
                banner,
                {
                    y: 0,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                header,
                {
                    y: 0,
                    opacity: 1,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                subtitle,
                {
                    opacity: 1,
                    scale: 1,
                    duration: 1,
                    ease: "elastic.out(1.2,0.7)",
                },
                "start+=0.1",
            )
            .to(
                titleEls,
                {
                    duration: 0.8,
                    opacity: 1,
                    y: 0,
                    stagger: 0.05,
                    ease: "elastic.out(1,0.7)",
                },
                "start+=0.1",
            )
            .to(
                workGrid,
                {
                    duration: 0.3,
                    opacity: 1,
                    ease: "power2",
                },
                "start+=0.3",
            );

        await waitForFooterSplineLoad();

        tlAppear.play();
    };

    const init = () => {
        page = document.querySelector("#page-work");

        if (!page) return;

        initFiltering();
        initLoadArchived();
        initAppear();
    };

    const cleanup = () => {
        tlAppear?.kill();
        consultingButton?.removeEventListener("click", onFilterButtonClick);
        advertisingButton?.removeEventListener("click", onFilterButtonClick);
        allButton?.removeEventListener("click", onFilterButtonClick);
        loadArchivedButton?.removeEventListener("click", loadMoreArchived);
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });

    document.addEventListener("astro:page-load", () => {
        init();
    });
</script>
