---
import Hero from "../../components/about/Hero.astro";
import Section from "../../components/about/Section.astro";
import People from "../../components/about/People.astro";
import Clients from "../../components/about/Clients.astro";
import Approach from "../../components/about/Approach.astro";
import Sports from "../../components/about/Sports.astro";
import Worldwide from "../../components/about/Worldwide.astro";
import Mindset from "../../components/about/Mindset.astro";
import Tomorrows from "../../components/about/Tomorrows.astro";
import Nav from "../../components/about/Nav.astro";

import Title from "../../components/atoms/Title.astro";

const { language, blok } = Astro.props;
---

<div id="page-about" class="about">
    <div
        class="container-main flex flex-col items-center pt-150 pb-120 lg:pt-135 lg:pb-145"
    >
        <span
            class="page-subtitle text-tag-big mb-24 flex items-center justify-center rounded-[5rem] border-3 px-16 py-12 opacity-0 lg:mb-65 lg:px-24 lg:py-13"
        >
            {blok.subtitle}
        </span>
        <h1 id="about-title" class="text-title-1 px-gutter w-10/12 text-center">
            <Title reveal="manual" title={blok.title[0]} />
        </h1>
        <Hero blok={blok} />
    </div>
    <div class="relative w-full" id="about-scrolling-container">
        <Nav />
        <Section
            order="1"
            title={blok.people_title[0]}
            bgColor="black"
            color="white"
        >
            <People blok={blok} />
        </Section>
        <Section
            order="2"
            id="about-clients"
            title={blok.clients_title[0]}
            bgColor="blue"
            color="black"
        >
            <Clients blok={blok} />
        </Section>
        <Section
            order="3"
            title={blok.approach_title[0]}
            bgColor="white"
            color="black"
        >
            <Approach blok={blok} />
        </Section>
        <Section
            order="4"
            id="about-sports"
            title={blok.sports_title[0]}
            bgColor="green"
            color="white"
        >
            <Sports blok={blok} />
        </Section>
        <Section
            order="5"
            title={blok.worldwide_title[0]}
            bgColor="pink"
            id="about-worldwide"
            color="black"
        >
            <Worldwide blok={blok} />
        </Section>
        <Section
            order="6"
            title={blok.mindset_title[0]}
            id="about-mindset"
            bgColor="orange"
            color="white"
        >
            <Mindset blok={blok} />
        </Section>
        <Section
            order="7"
            title={blok.tomorrows_title[0]}
            bgColor="black"
            color="white"
        >
            <Tomorrows blok={blok} />
        </Section>
    </div>
</div>

<script>
    import { waitForFooterSplineLoad } from "../../scripts/spline";

    let tlAppear: gsap.core.Timeline;
    let mm: gsap.MatchMedia;
    let page: HTMLElement | null;
    let nav: HTMLElement | null;
    let navWhite: HTMLElement | null;
    let navBlack: HTMLElement | null;

    const initAppear = async () => {
        if (!page) return;
        const banner = document.querySelector("#layout-banner");
        const header: NodeListOf<HTMLElement> = document.querySelectorAll(
            "#layout-header .layout-header",
        );
        const subtitle = page.querySelectorAll(".page-subtitle");
        const titleWordsDesktop = page.querySelectorAll(
            "#about-title .title-wrap-desktop .word-inner",
        );
        const titleWordsMobile = page.querySelectorAll(
            "#about-title .title-wrap-mobile .word-inner",
        );
        const cards = page.querySelectorAll(".about-hero-cards");

        if (window.innerWidth < 1024) {
            gsap.timeline().set(
                [cards, titleWordsMobile, subtitle, header, banner],
                {
                    opacity: 1,
                    rotate: 0,
                    y: 0,
                },
            );
            return;
        }

        gsap.timeline()
            .set(banner, {
                y: "-100%",
            })
            .set(header, {
                y: -50,
                opacity: 0,
            })
            .set(subtitle, {
                scale: 0.7,
                opacity: 0,
            })
            .set([titleWordsDesktop], {
                y: "100%",
                opacity: 1,
            })
            .set(cards, {
                y: "20rem",
                opacity: 0,
            });

        tlAppear = gsap
            .timeline({ paused: true, delay: 0.3 })
            .to(
                banner,
                {
                    y: 0,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                header,
                {
                    y: 0,
                    opacity: 1,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                subtitle,
                {
                    opacity: 1,
                    scale: 1,
                    duration: 1,
                    ease: "elastic.out(1.2,0.7)",
                },
                "start+=0.1",
            )
            .to(
                cards,
                {
                    duration: 1,
                    stagger: 0.1,
                    opacity: 1,
                    y: 0,
                    ease: "elastic.out(1,0.7)",
                },
                "<+=0.2",
            );

        tlAppear
            .to(
                titleWordsDesktop,
                {
                    duration: 0.8,
                    y: 0,
                    stagger: 0.05,
                    ease: "elastic.out(1,0.7)",
                },
                "start+=0.1",
            )
            .set(titleWordsMobile, {
                y: 0,
            });

        await waitForFooterSplineLoad();

        tlAppear.play();
    };

    const setupNavUpdates = (sections: NodeListOf<HTMLElement> | null) => {
        if (!nav || !sections || !sections.length) return;

        sections.forEach((section) => {
            const order = section.dataset.order;
            const navEvent = new CustomEvent("sectionchange", {
                detail: order,
            });
            gsap.timeline({
                scrollTrigger: {
                    trigger: section,
                    start: "top 50%",
                    end: "bottom 50%",
                    onEnter: () => {
                        nav?.dispatchEvent(navEvent);
                    },
                    onEnterBack: () => {
                        nav?.dispatchEvent(navEvent);
                    },
                },
            });
        });
    };

    const setupNavMask = () => {
        mm = gsap.matchMedia();

        mm.add("(width > 1024px)", () => {
            // Order is important, last one should be the first element in the page
            const sectionConfig = [
                {
                    el: page?.querySelector("#about-mindset"),
                    toWhite: true,
                },
                {
                    el: page?.querySelector("#about-worldwide"),
                    toWhite: false,
                },
                {
                    el: page?.querySelector("#about-sports"),
                    toWhite: true,
                },
                {
                    el: page?.querySelector("#about-clients"),
                    toWhite: false,
                },
            ];

            sectionConfig.forEach((s) => {
                gsap.timeline({
                    scrollTrigger: {
                        trigger: s.el,
                        start: "top bottom",
                        end: "top top",
                        scrub: true,
                        invalidateOnRefresh: true,
                    },
                })
                    .fromTo(
                        s.toWhite ? navBlack : navWhite,
                        {
                            clipPath:
                                "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
                        },
                        {
                            clipPath: "polygon(0% 0%, 100% 0%, 100% 0%, 0% 0%)",
                            ease: "none",
                        },
                    )
                    .fromTo(
                        s.toWhite ? navWhite : navBlack,
                        {
                            clipPath:
                                "polygon(0% 100%, 100% 100%, 100% 100%, 0% 100%)",
                        },
                        {
                            clipPath:
                                "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
                            ease: "none",
                        },
                        "<",
                    );
            });
        });
    };

    const init = () => {
        page = document.querySelector("#page-about");
        if (!page) return;
        nav = page.querySelector("#about-nav");
        navWhite = page.querySelector("#about-nav-white");
        navBlack = page.querySelector("#about-nav-black");

        initAppear();

        const sections: NodeListOf<HTMLElement> =
            page.querySelectorAll(".about-section");

        setupNavUpdates(sections);

        setupNavMask();
    };

    const cleanup = () => {
        page = document.querySelector("#page-about");
        if (!page) return;
        mm?.revert();
        tlAppear?.kill();
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });
    document.addEventListener("astro:page-load", () => {
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>

<style>
    #page-about :global(.pin-spacer) {
        pointer-events: none;
    }
</style>
