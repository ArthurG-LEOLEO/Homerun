---
import ArrowLink from "../../components/atoms/ArrowLink.astro";

import Hero from "../../components/approach/Hero.astro";
import CulturalPhilosophy from "../../components/approach/CulturalPhilosophy.astro";
import CulturalItems from "../../components/approach/CulturalItems.astro";
import CulturalProcess from "../../components/approach/CulturalProcess.astro";
import BoldAdvertising from "../../components/approach/BoldAdvertising.astro";
import Title from "../../components/atoms/Title.astro";

const { language, blok } = Astro.props;
---

<div class="approach overflow-hidden" id="page-approach">
    <div class="container-main flex flex-col items-center pt-150 lg:pt-135">
        <span
            class="page-subtitle text-tag-big mb-24 flex items-center justify-center rounded-[5rem] border-3 px-16 py-12 opacity-0 lg:mb-65 lg:px-24 lg:py-13"
        >
            {blok.subtitle}
        </span>
        <h1
            id="approach-title"
            class="text-title-1 px-gutter w-10/12 text-center"
        >
            <Title reveal="manual" title={blok.title[0]} />
        </h1>
    </div>
    <div id="scroll-container">
        <div class="relative mt-105 flex aspect-[1440/660] w-full lg:mt-130">
            <div
                class="bg-pink after:bg-pink approach-peak w-1/2 origin-bottom rounded-tl-[100%] opacity-0 after:absolute after:inset-x-0 after:bottom-[-0.3rem] after:h-3"
            ></div>
            <div
                class="bg-orange after:bg-orange approach-peak w-1/2 origin-bottom rounded-tr-[100%] opacity-0 after:absolute after:inset-x-0 after:bottom-[-0.3rem] after:h-3"
            ></div>
            <div
                id="helmet"
                class="pointer-events-none absolute top-[-22vw] left-[50%] size-[70vw] lg:size-[70vw]"
                style="--c: #2D5A36"
            >
                <div
                    class="size-1/2 translate-x-[-50%] translate-y-[50%] lg:hidden"
                >
                    <div
                        id="helmet-mobile-render"
                        class="bg-green size-full opacity-0"
                    >
                    </div>
                </div>
                <div
                    id="inner-helmet"
                    class="hidden size-full translate-x-[-50%] lg:block"
                >
                    <canvas id="helmet-canvas" class="size-full opacity-0"
                    ></canvas>
                </div>
            </div>
        </div>
        <div id="split-container" class="relative" style="--progress: 0.5;">
            <div
                id="hero-left-split"
                class="bg-pink absolute top-0 bottom-0 left-0 z-[-1] w-[calc(100%*(1-var(--progress)))] opacity-0"
            >
            </div>

            <div
                id="hero-right-split"
                class="bg-orange absolute top-0 right-0 bottom-0 z-[-1] w-[calc(100%*var(--progress))] opacity-0"
            >
            </div>

            <Hero blok={blok} />

            <div id="split-left-wrapper">
                <div id="split-left" class="py-105 lg:py-130">
                    <div
                        id="split-left-inner"
                        class="pointer-events-auto translate-x-[calc(100%*var(--progress)*-1)] lg:translate-x-[calc(70%*var(--progress)*-1)]"
                    >
                        <div class="container-main">
                            <div
                                class="mx-auto w-10/12 lg:mx-0 lg:ml-[8.333%] lg:w-1/2"
                            >
                                <CulturalPhilosophy blok={blok} />
                                <CulturalItems items={blok.cultural_items} />
                                <CulturalProcess blok={blok} />
                                {
                                    blok.cultural_link[0]?.label && (
                                        <ArrowLink
                                            label={blok.cultural_link[0].label}
                                            link={blok.cultural_link[0].link}
                                            className="mt-52 lg:mt-40"
                                        />
                                    )
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div
                id="second-mobile-helmet"
                class="pointer-events-none mt-[-30vw] mb-[-30vw] flex size-[100vw] w-full items-center justify-center lg:hidden"
            >
                <div id="second-inner-helmet" class="size-full">
                    <canvas id="second-helmet-canvas" class="size-full"
                    ></canvas>
                </div>
            </div>
            <div class="py-105 text-white lg:py-130">
                <div
                    id="split-right"
                    class="pointer-events-none lg:mt-[-100vh]"
                >
                    <div
                        id="split-right-inner"
                        class="pointer-events-auto translate-x-[calc(100%*(1-var(--progress)))] lg:translate-x-[calc(70%*(1-var(--progress)))]"
                    >
                        <div class="container-main flex justify-end">
                            <div
                                class="mx-auto w-10/12 lg:mx-0 lg:mr-[8.333%] lg:w-5/12"
                            >
                                <BoldAdvertising blok={blok} />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    import { Application } from "@splinetool/runtime";

    // we keep them separated if we need to change values
    const MOUSE_PARALLAX_ROTATION = (Math.PI / 180) * 10; // 10 deg
    const SCROLL_PARALLAX_ROTATION = (Math.PI / 180) * 10; // 10 deg

    // DOM Elements
    let page: HTMLElement | null;
    let scrollContainer: HTMLElement | null;
    let splitContainer: HTMLElement | null;
    let hero: HTMLElement | null;
    let heroInner: HTMLElement | null;
    let heroRightSplit: HTMLElement | null;
    let heroLeftSplit: HTMLElement | null;
    let splitRight: HTMLElement | null;
    let splitLeft: HTMLElement | null;
    let helmet: HTMLElement | null;
    let helmetCanvas: HTMLCanvasElement | null;
    let helmetMobileRender: HTMLCanvasElement | null;
    let secondHelmetCanvas: HTMLCanvasElement | null;
    let secondMobileHelmet: HTMLElement | null;

    //Spline stuff
    let spline: Application | null;
    let splineHelmetEmpty: any;
    let helmetEmptyRotateX: gsap.QuickToFunc | ((arg0: number) => void);
    let helmetEmptyRotateZ: gsap.QuickToFunc | ((arg0: number) => void);

    let tlAppear: gsap.core.Timeline | null;

    // GSAP MatchMedia
    let mm: gsap.MatchMedia | null;

    // mobile + desktop GSAP Timelines
    let gTlSplit1: gsap.core.Timeline | null;

    // mobile Timelines
    let mTlSplit2: gsap.core.Timeline | null;
    let mTlHelmet1: gsap.core.Timeline | null;
    let mTlHelmet2: gsap.core.Timeline | null;

    // desktop Timelines
    let dTlHelmetPin: gsap.core.Timeline | null;
    let dTlHelmet1: gsap.core.Timeline | null;
    let dTlHelmetTopToFace: gsap.core.Timeline | null;
    let dTlHelmet2: gsap.core.Timeline | null;
    let dTlSplit2Left: gsap.core.Timeline | null;
    let dTlSplit2Right: gsap.core.Timeline | null;

    //Desktop scroll parallax
    let parallaxScroll: ScrollTrigger | null;
    let prevScroll = 0;

    const setDOMElements = () => {
        scrollContainer = document.querySelector(".approach #scroll-container");
        splitContainer = document.querySelector(".approach #split-container");
        hero = document.querySelector(".approach #approach-hero");
        heroInner = document.querySelector(".approach #approach-hero-inner");
        heroRightSplit = document.querySelector(".approach #hero-right-split");
        heroLeftSplit = document.querySelector(".approach #hero-left-split");
        splitRight = document.querySelector(".approach #split-right");
        splitLeft = document.querySelector(".approach #split-left");
        helmet = document.querySelector(".approach #helmet");
        helmetCanvas = document.querySelector(".approach #helmet-canvas");
        helmetMobileRender = document.querySelector(
            ".approach #helmet-mobile-render",
        );
        secondHelmetCanvas = document.querySelector(
            ".approach #second-helmet-canvas",
        );
        secondMobileHelmet = document.querySelector(
            ".approach #second-mobile-helmet",
        );
    };

    const mobileAnimations = async () => {
        const { splineHelmet } = await initSpline(secondHelmetCanvas);

        splineHelmet.rotation.x = Math.PI * 1.25;
        splineHelmet.rotation.z = Math.PI / 2;

        mTlHelmet1 = gsap.timeline({
            scrollTrigger: {
                trigger: hero,
                start: "top center",
                end: "bottom 80%",
                pin: helmet,
                scrub: true,
            },
        });

        mTlHelmet2 = gsap.timeline({
            scrollTrigger: {
                trigger: secondMobileHelmet,
                start: () => `top+=${window.innerWidth * 0.3}px bottom`,
                end: () => `bottom-=${window.innerWidth * 0.3}px top`,
                scrub: true,
                onUpdate: (self) => {
                    if (!spline || !splineHelmet) return;
                    const p = self.progress;
                    splineHelmet.rotation.x =
                        Math.PI * 1.25 + Math.PI * -0.5 * p;
                },
            },
        });

        mTlSplit2 = gsap
            .timeline({
                scrollTrigger: {
                    trigger: splitRight,
                    start: "top bottom",
                    end: "top top",
                    scrub: true,
                },
            })
            .to(splitContainer, {
                "--progress": 0.99,
            });
    };

    const onApproachMouseMove = (e: MouseEvent) => {
        if (!spline || !splineHelmetEmpty) return;

        // Get normalized positions between -1 and 1. Where middle of the screen is 0,0
        const normalizedX = (e.clientX / window.innerWidth - 0.5) * 2;
        const normalizedY = (e.clientY / window.innerHeight - 0.5) * 2;

        helmetEmptyRotateX(-MOUSE_PARALLAX_ROTATION * normalizedX);
        helmetEmptyRotateZ(-MOUSE_PARALLAX_ROTATION * normalizedY);
    };

    const desktopAnimations = async () => {
        const { splineHelmet, helmetEmpty } = await initSpline(helmetCanvas);

        splineHelmetEmpty = helmetEmpty;
        helmetEmptyRotateX = gsap.quickTo(splineHelmetEmpty.rotation, "x", {
            duration: 0.6,
            ease: "power3",
        });
        helmetEmptyRotateZ = gsap.quickTo(splineHelmetEmpty.rotation, "z", {
            duration: 0.6,
            ease: "power3",
        });

        page?.addEventListener("mousemove", onApproachMouseMove);

        dTlHelmetTopToFace = gsap.timeline({
            scrollTrigger: {
                trigger: helmet,
                start: "center center",
                endTrigger: heroInner,
                end: "center-=20% center",
                invalidateOnRefresh: true,
                onUpdate: (self) => {
                    if (!spline || !splineHelmet) return;

                    const p = self.progress;
                    splineHelmet.rotation.x = Math.PI * p;
                    splineHelmet.rotation.z = (Math.PI / 2) * p;
                },
            },
        });

        dTlSplit2Left = gsap
            .timeline({
                scrollTrigger: {
                    trigger: splitLeft,
                    start: "bottom bottom",
                    end: "bottom top",
                    scrub: true,
                    pinSpacing: false,
                    pin: splitLeft,
                    invalidateOnRefresh: true,
                    onUpdate: (self) => {
                        if (!spline || !splineHelmet) return;
                        const p = self.progress;
                        splineHelmet.rotation.x =
                            Math.PI * 1.25 + Math.PI * -0.5 * p;
                    },
                },
            })
            .to(splitContainer, { "--progress": 0.99 })
            .to(helmet, { x: "-30vw" }, "<");

        dTlSplit2Right = gsap.timeline({
            scrollTrigger: {
                trigger: splitLeft,
                start: "bottom bottom",
                end: "bottom top",
                pin: splitRight,
                scrub: true,
                invalidateOnRefresh: true,
            },
        });

        dTlHelmetPin = gsap.timeline({
            scrollTrigger: {
                trigger: helmet,
                start: "center center",
                endTrigger: scrollContainer,
                end: "bottom bottom",
                pin: helmet,
                scrub: true,
                invalidateOnRefresh: true,
            },
        });

        dTlHelmet2 = gsap
            .timeline({
                scrollTrigger: {
                    trigger: hero,
                    start: "top top",
                    end: "bottom top",
                    scrub: true,
                    invalidateOnRefresh: true,
                    onUpdate: (self) => {
                        if (!spline || !splineHelmet) return;
                        const p = self.progress;
                        splineHelmet.rotation.x = Math.PI + Math.PI * 0.25 * p;
                    },
                },
            })
            .to(helmet, {
                x: "30vw",
            });

        parallaxScroll = window.ScrollTrigger.create({
            id: "approach-scroll-paralalx",
            trigger: "body",
            start: "top top",
            end: "bottom bottom",
            onUpdate: (self: ScrollTrigger) => {
                const scroll = self.scroll();
                let delta = (scroll - prevScroll) * 2;

                const verticalOffset = gsap.utils.clamp(-1, 1, delta / -20);

                helmetEmptyRotateZ(-SCROLL_PARALLAX_ROTATION * verticalOffset);

                prevScroll = scroll;
            },
        });
    };

    const initSpline = (
        canvas: HTMLCanvasElement | null,
    ): Promise<{ splineHelmet: any; helmetEmpty: any }> => {
        return new Promise((resolve, reject) => {
            if (!canvas) {
                reject("Can't initialized 3D, no canvas present");
                return;
            }
            spline = new Application(canvas);
            spline
                .load("/spline/approach.splinecode", undefined, {
                    credentials: "include",
                    mode: "no-cors",
                })
                .then(() => {
                    if (!spline) {
                        reject("Can't initialized 3D, Spline not initialized");
                        return;
                    }
                    spline.setBackgroundColor("transparent");

                    resolve({
                        splineHelmet: spline.findObjectByName("CasqueBaseball"),
                        helmetEmpty: spline.findObjectByName("CasqueBaseball6"),
                    });
                })
                .catch(() => {
                    reject("Can't initialized 3D, Spline doesn't respond");
                });
        });
    };

    const initAppear = () => {
        if (!page) return;

        const banner = document.querySelector("#layout-banner");
        const header = document.querySelectorAll(
            "#layout-header .layout-header",
        );
        const subtitle = page.querySelector(".page-subtitle");
        const approachPeak = page.querySelectorAll(".approach-peak");
        const titleWordsDesktop = page.querySelectorAll(
            "#approach-title .title-wrap-desktop .word-inner",
        );
        const titleWordsMobile = page.querySelectorAll(
            "#approach-title .title-wrap-mobile .word-inner",
        );

        gsap.timeline()
            .set(banner, {
                y: "-100%",
            })
            .set(header, {
                y: -50,
                opacity: 0,
            })
            .set(subtitle, {
                scale: 0.7,
                opacity: 0,
            })
            .set(approachPeak, {
                scaleY: 0,
                y: "10rem",
                opacity: 0,
            })
            .set([helmetCanvas, helmetMobileRender], {
                y: "10rem",
                opacity: 0,
            })
            .set([heroRightSplit, heroLeftSplit], {
                y: "10rem",
                opacity: 0,
            })
            .set([titleWordsMobile, titleWordsDesktop], {
                y: "100%",
                opacity: 1,
            });

        tlAppear = gsap
            .timeline({ delay: 0.3, paused: true })
            .to(
                banner,
                {
                    y: 0,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                header,
                {
                    y: 0,
                    opacity: 1,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                subtitle,
                {
                    opacity: 1,
                    scale: 1,
                    duration: 1,
                    ease: "elastic.out(1.2,0.7)",
                },
                "start+=0.1",
            )
            .to(
                [heroRightSplit, heroLeftSplit],
                {
                    opacity: 1,
                    y: 0,
                    duration: 1,
                    ease: "elastic.out(1,0.7)",
                },
                "start+=0.3",
            )
            .to(
                approachPeak,
                {
                    opacity: 1,
                    scaleY: 1,
                    y: 0,
                    duration: 1,
                    ease: "elastic.out(1,0.7)",
                },
                "start+=0.3",
            )
            .to(
                heroInner,
                {
                    opacity: 1,
                    duration: 0.8,
                    ease: "power3",
                },
                "start+=0.3",
            )
            .to(
                [helmetCanvas, helmetMobileRender],
                {
                    opacity: 1,
                    y: 0,
                    duration: 1,
                    ease: "elastic.out(1,0.7)",
                },
                "start+=0.3",
            );

        if (window.innerWidth > 1024) {
            tlAppear
                .to(
                    titleWordsDesktop,
                    {
                        duration: 0.8,
                        y: 0,
                        stagger: 0.05,
                        ease: "elastic.out(1,0.7)",
                    },
                    "<+=0.2",
                )
                .set(titleWordsMobile, {
                    y: 0,
                });
        } else {
            tlAppear
                .to(
                    titleWordsMobile,
                    {
                        duration: 0.8,
                        y: 0,
                        stagger: 0.05,
                        ease: "elastic.out(1,0.7)",
                    },
                    "<+=0.2",
                )
                .set(titleWordsDesktop, {
                    y: 0,
                });
        }
        tlAppear.play();
    };

    const waitForFooterSplineLoad = () => {
        return new Promise<void>((resolve, reject) => {
            const splineViewer: any | null =
                document.getElementById("SplineViewer");

            if (splineViewer?._loaded) {
                resolve();
            }

            splineViewer?.addEventListener("load-complete", () => {
                resolve();
            });
        });
    };

    const init = async () => {
        page = document.querySelector("#page-approach");
        if (!page) return;

        await waitForFooterSplineLoad();

        setDOMElements();

        mm = gsap.matchMedia();

        mm.add("(width < 1024px )", () => {
            mobileAnimations();
            return () => {
                cleanupMobile();
            };
        });

        mm.add("(width > 1024px )", () => {
            desktopAnimations();
            return () => {
                cleanupDesktop();
            };
        });

        gTlSplit1 = gsap
            .timeline({
                scrollTrigger: {
                    trigger: hero,
                    start: "top top",
                    end: "bottom top",
                    scrub: true,
                },
            })
            .to(splitContainer, {
                "--progress": 0.01,
            })
            .to(
                hero,
                {
                    "--offset": 1,
                },
                "<",
            );

        initAppear();
    };

    const cleanupMobile = () => {
        if (spline) spline.stop();
        spline = null;
        mTlHelmet1?.kill();
        mTlHelmet1 = null;
        mTlHelmet2?.kill();
        mTlHelmet2 = null;
        mTlSplit2?.kill();
        mTlSplit2 = null;
    };
    const cleanupDesktop = () => {
        page?.removeEventListener("mousemove", onApproachMouseMove);
        if (spline) spline.stop();
        spline = null;
        parallaxScroll?.kill();
        dTlSplit2Left?.kill();
        dTlSplit2Left = null;
        dTlSplit2Right?.kill();
        dTlSplit2Right = null;
        dTlHelmetPin?.kill();
        dTlHelmetPin = null;
        dTlHelmet1?.kill();
        dTlHelmet1 = null;
        dTlHelmet2?.kill();
        dTlHelmet2 = null;
    };

    const cleanup = () => {
        mm?.revert();
        mm = null;
        gTlSplit1?.kill();
        gTlSplit1 = null;
        scrollContainer = null;
        splitContainer = null;
        hero = null;
        heroInner = null;
        splitRight = null;
        splitLeft = null;
        helmet = null;
        secondMobileHelmet = null;
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:page-load", () => {
        init();
    });

    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
<style>
    #page-approach :global(.pin-spacer) {
        pointer-events: none;
    }
</style>
