---
import Title from "../../components/atoms/Title.astro";

import Section from "../../components/contact/Section.astro";
import Form from "../../components/contact/Form.astro";
import Jobs from "../../components/contact/Jobs.astro";
import Offices from "../../components/contact/Offices.astro";

const { language, blok } = Astro.props;
---

<div id="page-contact" class="contact bg-black text-white">
    <div
        class="container-main overflow-hidden pt-150 pb-70 lg:pt-135 lg:pb-125"
    >
        <div class="flex flex-col items-center">
            <span
                class="page-subtitle text-tag-big mb-24 flex items-center justify-center rounded-[5rem] border-3 px-16 py-12 opacity-0 lg:mb-65 lg:px-24 lg:py-13"
            >
                {blok.subtitle}
            </span>
            <h1
                id="contact-title"
                class="text-title-1 px-gutter w-10/12 text-center"
            >
                <Title reveal="manual" title={blok.title[0]} />
            </h1>
            <div class="flex flex-col items-center md:gap-8">
                <Section
                    className="contact-section-1"
                    innerClassName="translate-y-[20rem] rotate-[-5deg] opacity-0"
                >
                    <Form blok={blok} />
                </Section>
                <Section className="contact-section-2 rotate-[1deg]">
                    <Jobs blok={blok} />
                </Section>
                <Section className="contact-section-3 -rotate-[1.2deg]">
                    <Offices blok={blok} />
                </Section>
            </div>
        </div>
    </div>
</div>

<script>
    import { waitForFooterSplineLoad } from "../../scripts/spline";
    let tlAppear: gsap.core.Timeline;
    let tlSection1: gsap.core.Timeline;
    let tlSection2: gsap.core.Timeline;
    let tlSection3: gsap.core.Timeline;
    let section1: HTMLElement | null;
    let section2: HTMLElement | null;
    let section3: HTMLElement | null;
    let section1Inner: HTMLElement | null;

    const initBlockScroll = () => {
        tlSection1 = gsap
            .timeline({
                scrollTrigger: {
                    trigger: section1,
                    start: "bottom 40%",
                    end: "bottom top",
                    scrub: true,
                    invalidateOnRefresh: true,
                },
            })
            .to(section1, {
                duration: 1,
                rotate: 3,
                y: `-20rem`,
                ease: "power2.in",
            });

        tlSection1 = gsap
            .timeline({
                scrollTrigger: {
                    trigger: section1,
                    start: "bottom 40%",
                    end: "bottom top",
                    scrub: true,
                    invalidateOnRefresh: true,
                },
            })
            .to(section1, {
                duration: 1,
                rotate: 3,
                y: `-20rem`,
                ease: "power2.in",
            });

        tlSection2 = gsap
            .timeline({
                scrollTrigger: {
                    trigger: section2,
                    start: "top 100%",
                    end: "bottom top",
                    scrub: true,
                    invalidateOnRefresh: true,
                },
            })
            .fromTo(
                section2,
                { y: "10rem", rotate: -2 },
                {
                    duration: 1,
                    rotate: 1,
                    y: 0,
                    ease: "power2.out",
                },
            )
            .to(section2, {
                duration: 1,
                rotate: -3,
                y: `-20rem`,
                ease: "power2.in",
            });

        tlSection3 = gsap
            .timeline({
                scrollTrigger: {
                    trigger: section3,
                    start: "top 100%",
                    end: "bottom top",
                    scrub: true,
                    invalidateOnRefresh: true,
                },
            })
            .fromTo(
                section3,
                { y: "10rem", rotate: 2 },
                {
                    duration: 1,
                    rotate: -1.2,
                    y: 0,
                    ease: "power2.out",
                },
            )
            .to(section3, {
                duration: 1,
                rotate: 3,
                y: `-20rem`,
                ease: "power2.in",
            });
    };

    const init = async () => {
        const page = document.querySelector("#page-contact");
        if (!page) return;

        const banner = document.querySelector("#layout-banner");
        const header = document.querySelectorAll(
            "#layout-header .layout-header",
        );
        const subtitle = page.querySelectorAll(".page-subtitle");
        section1 = page.querySelector(".contact-section-1");
        section1Inner =
            section1?.querySelector(".contact-section-inner") || null;

        section2 = page.querySelector(".contact-section-2");
        section3 = page.querySelector(".contact-section-3");

        const titleWordsDesktop = page.querySelectorAll(
            "#contact-title .title-wrap-desktop .word-inner",
        );
        const titleWordsMobile = page.querySelectorAll(
            "#contact-title .title-wrap-mobile .word-inner",
        );

        await waitForFooterSplineLoad();

        gsap.timeline()
            .set(banner, {
                y: "-100%",
            })
            .set(header, {
                y: -50,
                opacity: 0,
            })
            .set(subtitle, {
                scale: 0.7,
                opacity: 0,
            })
            .set(section1Inner, {
                y: "20rem",
                opacity: 0,
                rotate: -5,
            })
            .set([titleWordsMobile, titleWordsDesktop], {
                y: "100%",
                opacity: 1,
            });

        tlAppear = gsap
            .timeline({ paused: true, delay: 0.3 })
            .to(
                banner,
                {
                    y: 0,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                header,
                {
                    y: 0,
                    opacity: 1,
                    duration: 0.6,
                    ease: "expo.out",
                },
                "start",
            )
            .to(
                subtitle,
                {
                    opacity: 1,
                    scale: 1,
                    duration: 1,
                    ease: "elastic.out(1.2,0.7)",
                },
                "start+=0.1",
            )
            .to(
                section1Inner,
                {
                    rotate: 0,
                    duration: 1,
                    opacity: 1,
                    y: 0,
                    ease: "elastic.out(1,0.7)",
                },
                "<+=0.5",
            );
        if (window.innerWidth > 1024) {
            tlAppear
                .to(
                    titleWordsDesktop,
                    {
                        duration: 0.8,
                        y: 0,
                        stagger: 0.05,
                        ease: "elastic.out(1,0.7)",
                    },
                    "start+=0.1",
                )
                .set(titleWordsMobile, {
                    y: 0,
                });
        } else {
            tlAppear
                .to(
                    titleWordsMobile,
                    {
                        duration: 0.8,
                        y: 0,
                        stagger: 0.05,
                        ease: "elastic.out(1,0.7)",
                    },
                    "start+=0.1",
                )
                .set(titleWordsDesktop, {
                    y: 0,
                });
        }
        tlAppear.play();

        initBlockScroll();
    };

    const cleanup = () => {
        tlAppear?.kill();
        tlSection1?.kill();
        tlSection2?.kill();
        tlSection3?.kill();
    };

    document.addEventListener("storyblok-live-preview-updated", () => {
        cleanup();
        init();
    });

    document.addEventListener("astro:page-load", () => {
        init();
    });
    document.addEventListener("astro:before-swap", () => {
        cleanup();
    });
</script>
