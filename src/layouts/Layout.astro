---
import { useStoryblokApi } from "@storyblok/astro";

import "@fontsource-variable/figtree";
import "@fontsource-variable/space-grotesk";

import "../styles/global.css";

import "lenis/dist/lenis.css";
import { ClientRouter } from "astro:transitions";
import isProd from "../utils/isProd";

import SEO from "../components/global/SEO.astro";
import Grid from "../components/global/Grid.astro";
import Cursor from "../components/global/Cursor.astro";
import Header from "../components/global/Header.astro";
import Banner from "../components/global/Banner.astro";
import Footer from "../components/global/Footer.astro";
import Loader from "../components/global/Loader.astro";
import HrefLangs from "../components/global/HrefLangs.astro";
import { defaultLocale } from "../i18n/config";

const isDev = import.meta.env.DEV;
const storyblokApi = useStoryblokApi();
const {
    language,
    headerLogoless = false,
    headerWhite = false,
    bannerTheme = {
        bg: "#edd4f8",
        txt: "#181817",
    },
    alternates,
    seo = {},
} = Astro.props;
const currentLocale = Astro.currentLocale;

const { data } = await storyblokApi.get(`cdn/stories/${language}/_global`, {
    version: !isProd() ? "draft" : "published",
});

const footerData = data.story.content.Footer[0];
const headerData = data.story.content.menu[0];

const fullAlternates = alternates.reduce(
    (alts: { [x: string]: string }, alt: { full_slug: string }) => {
        let fullSlug = alt.full_slug;
        const altLang = fullSlug.split("/")[0];

        if (altLang === defaultLocale) {
            fullSlug = fullSlug?.replace(/^(en\/)/, "");
        }

        fullSlug = new URL(fullSlug, Astro.site).toString();

        alts[altLang] = fullSlug;
        return alts;
    },
    {},
);

if (currentLocale) {
    fullAlternates[currentLocale] = new URL(Astro.url.pathname, Astro.site);
}
---

<!doctype html>
<html lang={language} data-prod={isProd}>
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href="/favicon.ico" sizes="32x32" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
        <meta name="generator" content={Astro.generator} />
        <SEO seo={seo} />
        <HrefLangs alternates={fullAlternates} />
        <ClientRouter />
        <link rel="preload" href="/spline/approach.splinecode" as="fetch" />
    </head>
    <body>
        <Banner theme={bannerTheme} />
        <Header
            blok={headerData}
            logoless={headerLogoless}
            white={headerWhite}
            alternates={alternates}
        />
        <slot />
        <Footer footerData={footerData} />
        <Loader />
        {isDev && <Grid />}
        <Cursor />
    </body></html
>

<script>
    import { gsap } from "gsap";
    import ScrollTrigger from "gsap/ScrollTrigger";
    import Observer from "gsap/Observer";
    import Lenis from "lenis";

    gsap.registerPlugin(ScrollTrigger);
    gsap.registerPlugin(Observer);

    // Initialize a new Lenis instance for smooth scrolling
    const lenis = new Lenis();

    // Synchronize Lenis scrolling with GSAP's ScrollTrigger plugin
    lenis.on("scroll", ScrollTrigger.update);

    // Add Lenis's requestAnimationFrame (raf) method to GSAP's ticker
    // This ensures Lenis's smooth scroll animation updates on each GSAP tick
    gsap.ticker.add((time) => {
        lenis.raf(time * 1000); // Convert time from seconds to milliseconds
    });

    // Disable lag smoothing in GSAP to prevent any delay in scroll animations
    gsap.ticker.lagSmoothing(0);

    window.gsap = gsap;
    window.lenis = lenis;
    window.Observer = Observer;
    window.ScrollTrigger = ScrollTrigger;

    const checkLangRedirect = () => {
        const fullUserLang = navigator.language;
        const userLang = fullUserLang.slice(0, 2);
        const currentPageLang = document.documentElement.lang;

        if (currentPageLang === userLang) return;

        const hreflangs: NodeListOf<HTMLElement> = document.querySelectorAll(
            'head link[rel="alternate"]',
        );

        const userLangPage = [...hreflangs].find((hl) => {
            return hl.getAttribute("hreflang") === userLang;
        });

        if (userLangPage) {
            const urlToRedirectTo = userLangPage.getAttribute("href");
            if (!urlToRedirectTo) return;
            const relativeUrlToRedirectTo = new URL(urlToRedirectTo).pathname;
            window.location.replace(relativeUrlToRedirectTo);
        }
    };

    document.addEventListener("astro:page-load", (event) => {
        window.scrollTo(0, 0);
        const preventBrowserLangRedirect = localStorage.getItem(
            "preventBrowserLangRedirect",
        );
        const isProdEnv = document.documentElement.dataset.prod === "true";

        if (!preventBrowserLangRedirect && isProdEnv) {
            checkLangRedirect();
        }
    });
</script>
